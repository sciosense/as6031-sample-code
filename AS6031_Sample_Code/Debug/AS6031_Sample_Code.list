
AS6031_Sample_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f64  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080040ec  080040ec  000140ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800412c  0800412c  00020188  2**0
                  CONTENTS
  4 .ARM          00000000  0800412c  0800412c  00020188  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800412c  0800412c  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800412c  0800412c  0001412c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004130  08004130  00014130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  08004134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000188  080042bc  00020188  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  080042bc  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008fe6  00000000  00000000  000201fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001631  00000000  00000000  000291e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000900  00000000  00000000  0002a818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006c8  00000000  00000000  0002b118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027449  00000000  00000000  0002b7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009ceb  00000000  00000000  00052c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f753c  00000000  00000000  0005c914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000251c  00000000  00000000  00153e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000098  00000000  00000000  0015636c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000188 	.word	0x20000188
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080040d4 	.word	0x080040d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000018c 	.word	0x2000018c
 80001c4:	080040d4 	.word	0x080040d4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <Set_SSN>:
  *            @arg LOW: to clear the SSN pin
  *            @arg HIGH: to set the SSN pin
  * @retval none
  */
void Set_SSN(uint8_t level)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
  if(level == LOW) {
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d104      	bne.n	8000a1e <Set_SSN+0x1a>
    HAL_GPIO_WritePin(SSN_GPIO_Port, SSN_Pin, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2140      	movs	r1, #64	; 0x40
 8000a18:	4807      	ldr	r0, [pc, #28]	; (8000a38 <Set_SSN+0x34>)
 8000a1a:	f001 fda5 	bl	8002568 <HAL_GPIO_WritePin>
  }
  if(level == HIGH) {
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d105      	bne.n	8000a30 <Set_SSN+0x2c>
    HAL_GPIO_WritePin(SSN_GPIO_Port, SSN_Pin, GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2140      	movs	r1, #64	; 0x40
 8000a28:	4803      	ldr	r0, [pc, #12]	; (8000a38 <Set_SSN+0x34>)
 8000a2a:	f001 fd9d 	bl	8002568 <HAL_GPIO_WritePin>
  }

  return;
 8000a2e:	bf00      	nop
 8000a30:	bf00      	nop
}
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	48000400 	.word	0x48000400

08000a3c <Write_Opcode>:
  * @brief  Write one byte Opcode.
  * @param  one_byte
  * @retval none
  */
void Write_Opcode(uint8_t one_byte)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
  /* Timeout duration in millisecond [ms] */
  uint8_t timeout = 10;
 8000a46:	230a      	movs	r3, #10
 8000a48:	73fb      	strb	r3, [r7, #15]
  
  /* 1. Put SSN low - Activate */
  PUT_SSN_LOW;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <Write_Opcode+0x30>)
 8000a4c:	2240      	movs	r2, #64	; 0x40
 8000a4e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* 2. Transmit register address */
  HAL_SPI_Transmit(&hspi1, &one_byte, 1, timeout); 
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	1df9      	adds	r1, r7, #7
 8000a54:	2201      	movs	r2, #1
 8000a56:	4806      	ldr	r0, [pc, #24]	; (8000a70 <Write_Opcode+0x34>)
 8000a58:	f002 fc85 	bl	8003366 <HAL_SPI_Transmit>
  
  /* 3. Put SSN high - Deactivate */
  PUT_SSN_HIGH;
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <Write_Opcode+0x30>)
 8000a5e:	2240      	movs	r2, #64	; 0x40
 8000a60:	619a      	str	r2, [r3, #24]

  return;
 8000a62:	bf00      	nop
}
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	48000400 	.word	0x48000400
 8000a70:	200001a4 	.word	0x200001a4

08000a74 <Write_Opcode2>:
  * @param  byte1 (e.g. opcode RC_MT_REQ)
  * @param  byte2 (e.g. request EC_MT_REQ_BITx)
  * @retval none
  */
void Write_Opcode2(uint8_t byte1, uint8_t byte2)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	460a      	mov	r2, r1
 8000a7e:	71fb      	strb	r3, [r7, #7]
 8000a80:	4613      	mov	r3, r2
 8000a82:	71bb      	strb	r3, [r7, #6]
  /* Timeout duration in millisecond [ms] */
  uint8_t timeout = 10;
 8000a84:	230a      	movs	r3, #10
 8000a86:	73fb      	strb	r3, [r7, #15]
  uint8_t spiTX[2];

  spiTX[0] = byte1;
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	733b      	strb	r3, [r7, #12]
  spiTX[1] = byte2;
 8000a8c:	79bb      	ldrb	r3, [r7, #6]
 8000a8e:	737b      	strb	r3, [r7, #13]
      
  /* 1. Put SSN low - Activate */
  Set_SSN(LOW);
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff ffb7 	bl	8000a04 <Set_SSN>
  
  /* 2. Transmit register address */
  HAL_SPI_Transmit(&hspi1, spiTX, 2, timeout);
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
 8000a98:	f107 010c 	add.w	r1, r7, #12
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <Write_Opcode2+0x40>)
 8000aa0:	f002 fc61 	bl	8003366 <HAL_SPI_Transmit>
  
  /* 3. Put SSN high - Deactivate */
  Set_SSN(HIGH);
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f7ff ffad 	bl	8000a04 <Set_SSN>

  return;
 8000aaa:	bf00      	nop
}
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200001a4 	.word	0x200001a4

08000ab8 <Write_Byte2>:
  * @param  address (two bytes)
  * @param  byte (byte)
  * @retval none
  */
void Write_Byte2(uint8_t opcode, uint16_t address, uint8_t byte)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	80bb      	strh	r3, [r7, #4]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	71bb      	strb	r3, [r7, #6]
  /* Timeout duration in millisecond [ms] */
  uint8_t timeout = 10;
 8000aca:	230a      	movs	r3, #10
 8000acc:	73fb      	strb	r3, [r7, #15]
  uint8_t spiTX[4];

  spiTX[0] = opcode;
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	723b      	strb	r3, [r7, #8]
  spiTX[1] = address>>8; //highest byte
 8000ad2:	88bb      	ldrh	r3, [r7, #4]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	727b      	strb	r3, [r7, #9]
  spiTX[2] = address;    //lowest byte
 8000adc:	88bb      	ldrh	r3, [r7, #4]
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	72bb      	strb	r3, [r7, #10]
  spiTX[3] = byte;
 8000ae2:	79bb      	ldrb	r3, [r7, #6]
 8000ae4:	72fb      	strb	r3, [r7, #11]

  /* 1. Put SSN low - Activate */
  Set_SSN(LOW);
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f7ff ff8c 	bl	8000a04 <Set_SSN>

  /* 2. Transmit register address */
  HAL_SPI_Transmit(&hspi1, spiTX, 4, timeout);
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
 8000aee:	f107 0108 	add.w	r1, r7, #8
 8000af2:	2204      	movs	r2, #4
 8000af4:	4804      	ldr	r0, [pc, #16]	; (8000b08 <Write_Byte2+0x50>)
 8000af6:	f002 fc36 	bl	8003366 <HAL_SPI_Transmit>

  /* 3. Put SSN high - Deactivate */
  Set_SSN(HIGH);
 8000afa:	2001      	movs	r0, #1
 8000afc:	f7ff ff82 	bl	8000a04 <Set_SSN>

  return;
 8000b00:	bf00      	nop
}
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	200001a4 	.word	0x200001a4

08000b0c <Write_Dword>:
  * @param  address (byte)
  * @param  dword (double word)
  * @retval none
  */
void Write_Dword(uint8_t opcode, uint8_t address, uint32_t dword)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	603a      	str	r2, [r7, #0]
 8000b16:	71fb      	strb	r3, [r7, #7]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	71bb      	strb	r3, [r7, #6]
  /* Timeout duration in millisecond [ms] */
  uint8_t timeout = 10;
 8000b1c:	230a      	movs	r3, #10
 8000b1e:	75fb      	strb	r3, [r7, #23]
  uint8_t spiTX[6];
  uint32_t temp_u32 = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	613b      	str	r3, [r7, #16]

  spiTX[0] = opcode;
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	723b      	strb	r3, [r7, #8]
  spiTX[1] = address;
 8000b28:	79bb      	ldrb	r3, [r7, #6]
 8000b2a:	727b      	strb	r3, [r7, #9]
  temp_u32 = dword;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	613b      	str	r3, [r7, #16]
  spiTX[2] = temp_u32>>24;
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	0e1b      	lsrs	r3, r3, #24
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	72bb      	strb	r3, [r7, #10]
  spiTX[3] = temp_u32>>16;
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	0c1b      	lsrs	r3, r3, #16
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	72fb      	strb	r3, [r7, #11]
  spiTX[4] = temp_u32>>8;
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	0a1b      	lsrs	r3, r3, #8
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	733b      	strb	r3, [r7, #12]
  spiTX[5] = temp_u32;
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	737b      	strb	r3, [r7, #13]
      
  /* 1. Put SSN low - Activate */
  Set_SSN(LOW);
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f7ff ff58 	bl	8000a04 <Set_SSN>
  
  /* 2. Transmit register address */
  HAL_SPI_Transmit(&hspi1, spiTX, 6, timeout);
 8000b54:	7dfb      	ldrb	r3, [r7, #23]
 8000b56:	f107 0108 	add.w	r1, r7, #8
 8000b5a:	2206      	movs	r2, #6
 8000b5c:	4804      	ldr	r0, [pc, #16]	; (8000b70 <Write_Dword+0x64>)
 8000b5e:	f002 fc02 	bl	8003366 <HAL_SPI_Transmit>
  
  /* 3. Put SSN high - Deactivate */
  Set_SSN(HIGH);
 8000b62:	2001      	movs	r0, #1
 8000b64:	f7ff ff4e 	bl	8000a04 <Set_SSN>

  return;
 8000b68:	bf00      	nop
}
 8000b6a:	3718      	adds	r7, #24
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200001a4 	.word	0x200001a4

08000b74 <Read_Dword>:
  * @param  opcode (byte)
  * @param  address (byte)
  * @retval 32-bit value
  */
uint32_t Read_Dword(uint8_t rd_opcode, uint8_t address)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	460a      	mov	r2, r1
 8000b7e:	71fb      	strb	r3, [r7, #7]
 8000b80:	4613      	mov	r3, r2
 8000b82:	71bb      	strb	r3, [r7, #6]
  /* Timeout duration in millisecond [ms] */
  uint8_t timeout = 10;
 8000b84:	230a      	movs	r3, #10
 8000b86:	75fb      	strb	r3, [r7, #23]
  uint8_t spiTX[2];
  uint8_t spiRX[4];
  uint32_t temp_u32 = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	613b      	str	r3, [r7, #16]
  
  spiTX[0] = rd_opcode;
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	733b      	strb	r3, [r7, #12]
  spiTX[1] = address;
 8000b90:	79bb      	ldrb	r3, [r7, #6]
 8000b92:	737b      	strb	r3, [r7, #13]
  
  /* 1. Put SSN low - Activate */
  Set_SSN(LOW);
 8000b94:	2000      	movs	r0, #0
 8000b96:	f7ff ff35 	bl	8000a04 <Set_SSN>
  
  /* 2. Transmit register address */
  HAL_SPI_Transmit(&hspi1, spiTX, 2, timeout);
 8000b9a:	7dfb      	ldrb	r3, [r7, #23]
 8000b9c:	f107 010c 	add.w	r1, r7, #12
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	480e      	ldr	r0, [pc, #56]	; (8000bdc <Read_Dword+0x68>)
 8000ba4:	f002 fbdf 	bl	8003366 <HAL_SPI_Transmit>
  
  /*3. Read four bytes */
  HAL_SPI_Receive(&hspi1, spiRX, 4, timeout);
 8000ba8:	7dfb      	ldrb	r3, [r7, #23]
 8000baa:	f107 0108 	add.w	r1, r7, #8
 8000bae:	2204      	movs	r2, #4
 8000bb0:	480a      	ldr	r0, [pc, #40]	; (8000bdc <Read_Dword+0x68>)
 8000bb2:	f002 fd4d 	bl	8003650 <HAL_SPI_Receive>
  
  /* 4. Put SSN high - Deactivate */
  Set_SSN(HIGH);
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f7ff ff24 	bl	8000a04 <Set_SSN>
  
  /*Concatenate of bytes (from MSB to LSB) */
  temp_u32 = (spiRX[0]<<24) + (spiRX[1]<<16) + (spiRX[2]<<8) + (spiRX[3]);
 8000bbc:	7a3b      	ldrb	r3, [r7, #8]
 8000bbe:	061a      	lsls	r2, r3, #24
 8000bc0:	7a7b      	ldrb	r3, [r7, #9]
 8000bc2:	041b      	lsls	r3, r3, #16
 8000bc4:	441a      	add	r2, r3
 8000bc6:	7abb      	ldrb	r3, [r7, #10]
 8000bc8:	021b      	lsls	r3, r3, #8
 8000bca:	4413      	add	r3, r2
 8000bcc:	7afa      	ldrb	r2, [r7, #11]
 8000bce:	4413      	add	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
  
  return temp_u32;
 8000bd2:	693b      	ldr	r3, [r7, #16]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3718      	adds	r7, #24
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	200001a4 	.word	0x200001a4

08000be0 <Read_Dword_Bits>:
  * @param  msbit (byte) most significat bit
  * @param  lsbit (byte) low significant bit
  * @retval 32-bit value, content of specified bits
  */
uint32_t Read_Dword_Bits(uint8_t rd_opcode, uint8_t address, uint8_t msbit, uint8_t lsbit)
{
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b089      	sub	sp, #36	; 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4604      	mov	r4, r0
 8000be8:	4608      	mov	r0, r1
 8000bea:	4611      	mov	r1, r2
 8000bec:	461a      	mov	r2, r3
 8000bee:	4623      	mov	r3, r4
 8000bf0:	71fb      	strb	r3, [r7, #7]
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71bb      	strb	r3, [r7, #6]
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	717b      	strb	r3, [r7, #5]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	713b      	strb	r3, [r7, #4]
//#define _DEBUGGGING_FUNCTION
  
  uint32_t address_content = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
  uint32_t bit_amount = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
  uint32_t bit_mask = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
  uint32_t temp_u32 = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
  
  /* out of range [31:0] */
  if (msbit > 31) msbit = 31;
 8000c0e:	797b      	ldrb	r3, [r7, #5]
 8000c10:	2b1f      	cmp	r3, #31
 8000c12:	d901      	bls.n	8000c18 <Read_Dword_Bits+0x38>
 8000c14:	231f      	movs	r3, #31
 8000c16:	717b      	strb	r3, [r7, #5]
  if (lsbit > 31) lsbit = 31;
 8000c18:	793b      	ldrb	r3, [r7, #4]
 8000c1a:	2b1f      	cmp	r3, #31
 8000c1c:	d901      	bls.n	8000c22 <Read_Dword_Bits+0x42>
 8000c1e:	231f      	movs	r3, #31
 8000c20:	713b      	strb	r3, [r7, #4]
  
  if (lsbit > msbit) lsbit = msbit;
 8000c22:	793a      	ldrb	r2, [r7, #4]
 8000c24:	797b      	ldrb	r3, [r7, #5]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d901      	bls.n	8000c2e <Read_Dword_Bits+0x4e>
 8000c2a:	797b      	ldrb	r3, [r7, #5]
 8000c2c:	713b      	strb	r3, [r7, #4]
  
  /* build the mask */
  bit_amount = msbit - lsbit;
 8000c2e:	797a      	ldrb	r2, [r7, #5]
 8000c30:	793b      	ldrb	r3, [r7, #4]
 8000c32:	1ad3      	subs	r3, r2, r3
 8000c34:	613b      	str	r3, [r7, #16]
  for (int i = 0; i < bit_amount + 1; i++) {
 8000c36:	2300      	movs	r3, #0
 8000c38:	61bb      	str	r3, [r7, #24]
 8000c3a:	e008      	b.n	8000c4e <Read_Dword_Bits+0x6e>
    bit_mask <<= 1;
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	61fb      	str	r3, [r7, #28]
    bit_mask += 1;
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3301      	adds	r3, #1
 8000c46:	61fb      	str	r3, [r7, #28]
  for (int i = 0; i < bit_amount + 1; i++) {
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	61bb      	str	r3, [r7, #24]
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	1c5a      	adds	r2, r3, #1
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d8f1      	bhi.n	8000c3c <Read_Dword_Bits+0x5c>
  }
  bit_mask <<= lsbit;
 8000c58:	793b      	ldrb	r3, [r7, #4]
 8000c5a:	69fa      	ldr	r2, [r7, #28]
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	61fb      	str	r3, [r7, #28]
  
  /* read the register content */
  address_content = Read_Dword(rd_opcode, address);
 8000c62:	79ba      	ldrb	r2, [r7, #6]
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	4611      	mov	r1, r2
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ff83 	bl	8000b74 <Read_Dword>
 8000c6e:	6178      	str	r0, [r7, #20]
  temp_u32 = (address_content & bit_mask) >> lsbit;
 8000c70:	697a      	ldr	r2, [r7, #20]
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	401a      	ands	r2, r3
 8000c76:	793b      	ldrb	r3, [r7, #4]
 8000c78:	fa22 f303 	lsr.w	r3, r2, r3
 8000c7c:	60fb      	str	r3, [r7, #12]
  printf(" RD bit_mask = 0x%08X\n", bit_mask);
#endif
  
#undef _DEBUGGGING_FUNCTION
  
  return temp_u32;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3724      	adds	r7, #36	; 0x24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd90      	pop	{r4, r7, pc}

08000c88 <AS6031_Update_Param>:
  * @brief  Handle parameter update.
  * @param  init pointer to a AS6031_InitTypeDef structure that contains
  *               the configuration information for the specified device.
  * @retval None
  */
void AS6031_Update_Param(AS6031_InitTypeDef* init)  {
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	/* Read all content from CR[] and write into every parameter
	 * Update for each parameter */
	/* Parameter of CR[0] */
	init->Param.CR0.WS_DIS = ( (init->CR[0]) & AS6031_C0_WS_DIS_Msk ) >> AS6031_C0_WS_DIS_Pos;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	651a      	str	r2, [r3, #80]	; 0x50
	/* Parameter of CR[1] */
	init->Param.CR1.PI_TPW = ( (init->CR[1]) & AS6031_C1_PI_TPW_Msk ) >> AS6031_C1_PI_TPW_Pos;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	init->Param.CR1.PI_EN = ( (init->CR[1]) & AS6031_C1_PI_EN_Msk ) >> AS6031_C1_PI_EN_Pos;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	init->Param.CR1.PI_OUT_MODE = ( (init->CR[1]) & AS6031_C1_PI_OUT_MODE_Msk ) >> AS6031_C1_PI_OUT_MODE_Pos;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	0a5b      	lsrs	r3, r3, #9
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	init->Param.CR1.PI_UPD_MODE = ( (init->CR[1]) & AS6031_C1_PI_UPD_MODE_Msk ) >> AS6031_C1_PI_UPD_MODE_Pos;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	0a9b      	lsrs	r3, r3, #10
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	init->Param.CR1.HIDDEN_11_11 = ( (init->CR[1]) & AS6031_C1_HIDDEN_11_11_Msk ) >> AS6031_C1_HIDDEN_11_11_Pos;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	0adb      	lsrs	r3, r3, #11
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	init->Param.CR1.I2C_MODE = ( (init->CR[1]) & AS6031_C1_I2C_MODE_Msk ) >> AS6031_C1_I2C_MODE_Pos;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	0b1b      	lsrs	r3, r3, #12
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	f003 0303 	and.w	r3, r3, #3
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	init->Param.CR1.I2C_ADR = ( (init->CR[1]) & AS6031_C1_I2C_ADR_Msk ) >> AS6031_C1_I2C_ADR_Pos;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	0b9b      	lsrs	r3, r3, #14
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	init->Param.CR1.HIDDEN_21_21 = ( (init->CR[1]) & AS6031_C1_HIDDEN_21_21_Msk ) >> AS6031_C1_HIDDEN_21_21_Pos;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	0d5b      	lsrs	r3, r3, #21
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	init->Param.CR1.SPI_INPORT_CFG = ( (init->CR[1]) & AS6031_C1_SPI_INPORT_CFG_Msk ) >> AS6031_C1_SPI_INPORT_CFG_Pos;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	0d9b      	lsrs	r3, r3, #22
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	f003 0303 	and.w	r3, r3, #3
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	init->Param.CR1.NOT_USED_31_24 = ( (init->CR[1]) & AS6031_C1_NOT_USED_31_24_Msk ) >> AS6031_C1_NOT_USED_31_24_Pos;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	0e1b      	lsrs	r3, r3, #24
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	/* Parameter of CR[2] */
	init->Param.CR2.GP0_DIR = ( (init->CR[2]) & AS6031_C2_GP0_DIR_Msk ) >> AS6031_C2_GP0_DIR_Pos;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	init->Param.CR2.GP0_SEL = ( (init->CR[2]) & AS6031_C2_GP0_SEL_Msk ) >> AS6031_C2_GP0_SEL_Pos;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	089b      	lsrs	r3, r3, #2
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	f003 0303 	and.w	r3, r3, #3
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	init->Param.CR2.GP1_DIR = ( (init->CR[2]) & AS6031_C2_GP1_DIR_Msk ) >> AS6031_C2_GP1_DIR_Pos;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	091b      	lsrs	r3, r3, #4
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	f003 0303 	and.w	r3, r3, #3
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	init->Param.CR2.GP1_SEL = ( (init->CR[2]) & AS6031_C2_GP1_SEL_Msk ) >> AS6031_C2_GP1_SEL_Pos;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	099b      	lsrs	r3, r3, #6
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	f003 0303 	and.w	r3, r3, #3
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	init->Param.CR2.GP2_DIR = ( (init->CR[2]) & AS6031_C2_GP2_DIR_Msk ) >> AS6031_C2_GP2_DIR_Pos;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	0a1b      	lsrs	r3, r3, #8
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	f003 0303 	and.w	r3, r3, #3
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	init->Param.CR2.GP2_SEL = ( (init->CR[2]) & AS6031_C2_GP2_SEL_Msk ) >> AS6031_C2_GP2_SEL_Pos;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	0a9b      	lsrs	r3, r3, #10
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	init->Param.CR2.GP3_DIR = ( (init->CR[2]) & AS6031_C2_GP3_DIR_Msk ) >> AS6031_C2_GP3_DIR_Pos;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	0b1b      	lsrs	r3, r3, #12
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	f003 0303 	and.w	r3, r3, #3
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	init->Param.CR2.GP3_SEL = ( (init->CR[2]) & AS6031_C2_GP3_SEL_Msk ) >> AS6031_C2_GP3_SEL_Pos;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	0b9b      	lsrs	r3, r3, #14
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	init->Param.CR2.GP4_DIR = ( (init->CR[2]) & AS6031_C2_GP4_DIR_Msk ) >> AS6031_C2_GP4_DIR_Pos;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	0c1b      	lsrs	r3, r3, #16
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	init->Param.CR2.GP4_SEL = ( (init->CR[2]) & AS6031_C2_GP4_SEL_Msk ) >> AS6031_C2_GP4_SEL_Pos;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	0c9b      	lsrs	r3, r3, #18
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	f003 0303 	and.w	r3, r3, #3
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	init->Param.CR2.GP5_DIR = ( (init->CR[2]) & AS6031_C2_GP5_DIR_Msk ) >> AS6031_C2_GP5_DIR_Pos;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	0d1b      	lsrs	r3, r3, #20
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	f003 0303 	and.w	r3, r3, #3
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	init->Param.CR2.GP5_SEL = ( (init->CR[2]) & AS6031_C2_GP5_SEL_Msk ) >> AS6031_C2_GP5_SEL_Pos;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	0d9b      	lsrs	r3, r3, #22
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	init->Param.CR2.NOT_USED_31_24 = ( (init->CR[2]) & AS6031_C2_NOT_USED_31_24_Msk ) >> AS6031_C2_NOT_USED_31_24_Pos;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	0e1b      	lsrs	r3, r3, #24
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	/* Parameter of CR[3] */
	init->Param.CR3.USM_OPT = ( (init->CR[3]) & AS6031_C3_USM_OPT_Msk ) >> AS6031_C3_USM_OPT_Pos;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	f003 031f 	and.w	r3, r3, #31
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	init->Param.CR3.NOT_USED_31_5 = ( (init->CR[3]) & AS6031_C3_NOT_USED_31_5_Msk ) >> AS6031_C3_NOT_USED_31_5_Pos;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	095a      	lsrs	r2, r3, #5
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	671a      	str	r2, [r3, #112]	; 0x70
	/* Parameter of CR[4] */
	init->Param.CR4.EF_EN_TDC_TMO = ( (init->CR[4]) & AS6031_C4_EF_EN_TDC_TMO_Msk ) >> AS6031_C4_EF_EN_TDC_TMO_Pos;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	691b      	ldr	r3, [r3, #16]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	init->Param.CR4.EF_EN_TOF_TMO = ( (init->CR[4]) & AS6031_C4_EF_EN_TOF_TMO_Msk ) >> AS6031_C4_EF_EN_TOF_TMO_Pos;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	691b      	ldr	r3, [r3, #16]
 8000e80:	085b      	lsrs	r3, r3, #1
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	init->Param.CR4.EF_EN_AM_TMO = ( (init->CR[4]) & AS6031_C4_EF_EN_AM_TMO_Msk ) >> AS6031_C4_EF_EN_AM_TMO_Pos;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	691b      	ldr	r3, [r3, #16]
 8000e94:	089b      	lsrs	r3, r3, #2
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	init->Param.CR4.EF_EN_TM_OC = ( (init->CR[4]) & AS6031_C4_EF_EN_TM_OC_Msk ) >> AS6031_C4_EF_EN_TM_OC_Pos;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	691b      	ldr	r3, [r3, #16]
 8000ea8:	08db      	lsrs	r3, r3, #3
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	init->Param.CR4.EF_EN_TM_SC = ( (init->CR[4]) & AS6031_C4_EF_EN_TM_SC_Msk ) >> AS6031_C4_EF_EN_TM_SC_Pos;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	691b      	ldr	r3, [r3, #16]
 8000ebc:	091b      	lsrs	r3, r3, #4
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	init->Param.CR4.EF_EN_ZCC_ERR = ( (init->CR[4]) & AS6031_C4_EF_EN_ZCC_ERR_Msk ) >> AS6031_C4_EF_EN_ZCC_ERR_Pos;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	691b      	ldr	r3, [r3, #16]
 8000ed0:	095b      	lsrs	r3, r3, #5
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	init->Param.CR4.EF_EN_LBD_ERR = ( (init->CR[4]) & AS6031_C4_EF_EN_LBD_ERR_Msk ) >> AS6031_C4_EF_EN_LBD_ERR_Pos;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	691b      	ldr	r3, [r3, #16]
 8000ee4:	099b      	lsrs	r3, r3, #6
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	init->Param.CR4.EF_EN_USM_SQC_TMO = ( (init->CR[4]) & AS6031_C4_EF_EN_USM_SQC_TMO_Msk ) >> AS6031_C4_EF_EN_USM_SQC_TMO_Pos;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	691b      	ldr	r3, [r3, #16]
 8000ef8:	09db      	lsrs	r3, r3, #7
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	init->Param.CR4.EF_EN_TM_SQC_TMO = ( (init->CR[4]) & AS6031_C4_EF_EN_TM_SQC_TMO_Msk ) >> AS6031_C4_EF_EN_TM_SQC_TMO_Pos;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	691b      	ldr	r3, [r3, #16]
 8000f0c:	0a1b      	lsrs	r3, r3, #8
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	init->Param.CR4.EF_EN_TSQ_TMO = ( (init->CR[4]) & AS6031_C4_EF_EN_TSQ_TMO_Msk ) >> AS6031_C4_EF_EN_TSQ_TMO_Pos;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	691b      	ldr	r3, [r3, #16]
 8000f20:	0a5b      	lsrs	r3, r3, #9
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
	init->Param.CR4.EF_EN_I2C_ACK_ERR = ( (init->CR[4]) & AS6031_C4_EF_EN_I2C_ACK_ERR_Msk ) >> AS6031_C4_EF_EN_I2C_ACK_ERR_Pos;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	0a9b      	lsrs	r3, r3, #10
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	init->Param.CR4.HIDDEN_11_11 = ( (init->CR[4]) & AS6031_C4_HIDDEN_11_11_Msk ) >> AS6031_C4_HIDDEN_11_11_Pos;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	691b      	ldr	r3, [r3, #16]
 8000f48:	0adb      	lsrs	r3, r3, #11
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	init->Param.CR4.EF_EN_NVM_FWCU_ERR = ( (init->CR[4]) & AS6031_C4_EF_EN_NVM_FWCU_ERR_Msk ) >> AS6031_C4_EF_EN_NVM_FWCU_ERR_Pos;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	691b      	ldr	r3, [r3, #16]
 8000f5c:	0b1b      	lsrs	r3, r3, #12
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	init->Param.CR4.EF_EN_NVM_FWDU_ERR = ( (init->CR[4]) & AS6031_C4_EF_EN_NVM_FWDU_ERR_Msk ) >> AS6031_C4_EF_EN_NVM_FWDU_ERR_Pos;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	691b      	ldr	r3, [r3, #16]
 8000f70:	0b5b      	lsrs	r3, r3, #13
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	init->Param.CR4.EF_EN_NVM_FWA_ERR = ( (init->CR[4]) & AS6031_C4_EF_EN_NVM_FWA_ERR_Msk ) >> AS6031_C4_EF_EN_NVM_FWA_ERR_Pos;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	691b      	ldr	r3, [r3, #16]
 8000f84:	0b9b      	lsrs	r3, r3, #14
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	init->Param.CR4.EF_EN_CPU_ERR = ( (init->CR[4]) & AS6031_C4_EF_EN_CPU_ERR_Msk ) >> AS6031_C4_EF_EN_CPU_ERR_Pos;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	0bdb      	lsrs	r3, r3, #15
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	init->Param.CR4.IRQ_EN_TSQ_FNS = ( (init->CR[4]) & AS6031_C4_IRQ_EN_TSQ_FNS_Msk ) >> AS6031_C4_IRQ_EN_TSQ_FNS_Pos;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	691b      	ldr	r3, [r3, #16]
 8000fac:	0c1b      	lsrs	r3, r3, #16
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	init->Param.CR4.IRQ_EN_TRANS_FNS = ( (init->CR[4]) & AS6031_C4_IRQ_EN_TRANS_FNS_Msk ) >> AS6031_C4_IRQ_EN_TRANS_FNS_Pos;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	691b      	ldr	r3, [r3, #16]
 8000fc0:	0c5b      	lsrs	r3, r3, #17
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	init->Param.CR4.IRQ_EN_BLD_FNS = ( (init->CR[4]) & AS6031_C4_IRQ_EN_BLD_FNS_Msk ) >> AS6031_C4_IRQ_EN_BLD_FNS_Pos;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	691b      	ldr	r3, [r3, #16]
 8000fd4:	0c9b      	lsrs	r3, r3, #18
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
	init->Param.CR4.IRQ_EN_CHKSUM_FNS = ( (init->CR[4]) & AS6031_C4_IRQ_EN_CHKSUM_FNS_Msk ) >> AS6031_C4_IRQ_EN_CHKSUM_FNS_Pos;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	0cdb      	lsrs	r3, r3, #19
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
	init->Param.CR4.IRQ_EN_FW_S = ( (init->CR[4]) & AS6031_C4_IRQ_EN_FW_S_Msk ) >> AS6031_C4_IRQ_EN_FW_S_Pos;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	0d1b      	lsrs	r3, r3, #20
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	b2da      	uxtb	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	init->Param.CR4.IRQ_EN_TSQ_TO = ( (init->CR[4]) & AS6031_C4_IRQ_EN_TSQ_TO_Msk ) >> AS6031_C4_IRQ_EN_TSQ_TO_Pos;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	0d5b      	lsrs	r3, r3, #21
 8001012:	b2db      	uxtb	r3, r3
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	b2da      	uxtb	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
	init->Param.CR4.HIDDEN_22_22 = ( (init->CR[4]) & AS6031_C4_HIDDEN_22_22_Msk ) >> AS6031_C4_HIDDEN_22_22_Pos;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	691b      	ldr	r3, [r3, #16]
 8001024:	0d9b      	lsrs	r3, r3, #22
 8001026:	b2db      	uxtb	r3, r3
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	b2da      	uxtb	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
	init->Param.CR4.IRQ_EN_ERR_FLAG = ( (init->CR[4]) & AS6031_C4_IRQ_EN_ERR_FLAG_Msk ) >> AS6031_C4_IRQ_EN_ERR_FLAG_Pos;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	0ddb      	lsrs	r3, r3, #23
 800103a:	b2db      	uxtb	r3, r3
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	b2da      	uxtb	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
	init->Param.CR4.HIDDEN_26_24 = ( (init->CR[4]) & AS6031_C4_HIDDEN_26_24_Msk ) >> AS6031_C4_HIDDEN_26_24_Pos;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	0e1b      	lsrs	r3, r3, #24
 800104e:	b2db      	uxtb	r3, r3
 8001050:	f003 0307 	and.w	r3, r3, #7
 8001054:	b2da      	uxtb	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	init->Param.CR4.CPU_REQ_EN_GPH = ( (init->CR[4]) & AS6031_C4_CPU_REQ_EN_GPH_Msk ) >> AS6031_C4_CPU_REQ_EN_GPH_Pos;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	691b      	ldr	r3, [r3, #16]
 8001060:	0edb      	lsrs	r3, r3, #27
 8001062:	b2db      	uxtb	r3, r3
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	b2da      	uxtb	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	init->Param.CR4.TS_GPT_RATE = ( (init->CR[4]) & AS6031_C4_TS_GPT_RATE_Msk ) >> AS6031_C4_TS_GPT_RATE_Pos;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	691b      	ldr	r3, [r3, #16]
 8001074:	0f1b      	lsrs	r3, r3, #28
 8001076:	b2da      	uxtb	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	/* Parameter of CR[5] */
	init->Param.CR5.HSC_DIV_MODE = ( (init->CR[5]) & AS6031_C5_HSC_DIV_MODE_Msk ) >> AS6031_C5_HSC_DIV_MODE_Pos;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	b2da      	uxtb	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	init->Param.CR5.NOT_USED_1_1 = ( (init->CR[5]) & AS6031_C5_NOT_USED_1_1_Msk ) >> AS6031_C5_NOT_USED_1_1_Pos;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	085b      	lsrs	r3, r3, #1
 8001096:	b2db      	uxtb	r3, r3
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	b2da      	uxtb	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	init->Param.CR5.HSC_CLK_ST = ( (init->CR[5]) & AS6031_C5_HSC_CLK_ST_Msk ) >> AS6031_C5_HSC_CLK_ST_Pos;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	089b      	lsrs	r3, r3, #2
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	f003 0307 	and.w	r3, r3, #7
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	init->Param.CR5.HIDDEN_7_5 = ( (init->CR[5]) & AS6031_C5_HIDDEN_7_5_Msk ) >> AS6031_C5_HIDDEN_7_5_Pos;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	095b      	lsrs	r3, r3, #5
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	init->Param.CR5.HSC_DIV = ( (init->CR[5]) & AS6031_C5_HSC_DIV_Msk ) >> AS6031_C5_HSC_DIV_Pos;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	init->Param.CR5.HSC_RATE = ( (init->CR[5]) & AS6031_C5_HSC_RATE_Msk ) >> AS6031_C5_HSC_RATE_Pos;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	0a5b      	lsrs	r3, r3, #9
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	init->Param.CR5.HSC_MODE_CPU = ( (init->CR[5]) & AS6031_C5_HSC_MODE_CPU_Msk ) >> AS6031_C5_HSC_MODE_CPU_Pos;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	695b      	ldr	r3, [r3, #20]
 80010f8:	0b1b      	lsrs	r3, r3, #12
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	b2da      	uxtb	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	init->Param.CR5.VM_RATE = ( (init->CR[5]) & AS6031_C5_VM_RATE_Msk ) >> AS6031_C5_VM_RATE_Pos;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	0b5b      	lsrs	r3, r3, #13
 800110e:	b2db      	uxtb	r3, r3
 8001110:	f003 0307 	and.w	r3, r3, #7
 8001114:	b2da      	uxtb	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	init->Param.CR5.LBD_TH = ( (init->CR[5]) & AS6031_C5_LBD_TH_Msk ) >> AS6031_C5_LBD_TH_Pos;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	0c1b      	lsrs	r3, r3, #16
 8001122:	b2db      	uxtb	r3, r3
 8001124:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001128:	b2da      	uxtb	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	init->Param.CR5.TSV_UPD_MODE = ( (init->CR[5]) & AS6031_C5_TSV_UPD_MODE_Msk ) >> AS6031_C5_TSV_UPD_MODE_Pos;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	0d9b      	lsrs	r3, r3, #22
 8001136:	b2db      	uxtb	r3, r3
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	b2da      	uxtb	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	init->Param.CR5.BF_SEL = ( (init->CR[5]) & AS6031_C5_BF_SEL_Msk ) >> AS6031_C5_BF_SEL_Pos;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	0ddb      	lsrs	r3, r3, #23
 800114a:	b2db      	uxtb	r3, r3
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	b2da      	uxtb	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	init->Param.CR5.HIDDEN_27_24 = ( (init->CR[5]) & AS6031_C5_HIDDEN_27_24_Msk ) >> AS6031_C5_HIDDEN_27_24_Pos;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	0e1b      	lsrs	r3, r3, #24
 800115e:	b2db      	uxtb	r3, r3
 8001160:	f003 030f 	and.w	r3, r3, #15
 8001164:	b2da      	uxtb	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	init->Param.CR5.HIDDEN_28_28 = ( (init->CR[5]) & AS6031_C5_HIDDEN_28_28_Msk ) >> AS6031_C5_HIDDEN_28_28_Pos;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	695b      	ldr	r3, [r3, #20]
 8001170:	0f1b      	lsrs	r3, r3, #28
 8001172:	b2db      	uxtb	r3, r3
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	b2da      	uxtb	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	init->Param.CR5.TI_PATH_SEL = ( (init->CR[5]) & AS6031_C5_TI_PATH_SEL_Msk ) >> AS6031_C5_TI_PATH_SEL_Pos;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	0f5b      	lsrs	r3, r3, #29
 8001186:	b2db      	uxtb	r3, r3
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	b2da      	uxtb	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	init->Param.CR5.HIDDEN_31_31 = ( (init->CR[5]) & AS6031_C5_HIDDEN_31_31_Msk ) >> AS6031_C5_HIDDEN_31_31_Pos;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	0fdb      	lsrs	r3, r3, #31
 800119a:	b2da      	uxtb	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	/* Parameter of CR[6] */
	init->Param.CR6.MR_CT = ( (init->CR[6]) & AS6031_C6_MR_CT_Msk ) >> AS6031_C6_MR_CT_Pos;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	f3c3 020c 	ubfx	r2, r3, #0, #13
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	init->Param.CR6.TS_MCM = ( (init->CR[6]) & AS6031_C6_TS_MCM_Msk ) >> AS6031_C6_TS_MCM_Pos;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	0b5b      	lsrs	r3, r3, #13
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	init->Param.CR6.TS_PP_T_EN = ( (init->CR[6]) & AS6031_C6_TS_PP_T_EN_Msk ) >> AS6031_C6_TS_PP_T_EN_Pos;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	0b9b      	lsrs	r3, r3, #14
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
	init->Param.CR6.TS_PP_F_EN = ( (init->CR[6]) & AS6031_C6_TS_PP_F_EN_Msk ) >> AS6031_C6_TS_PP_F_EN_Pos;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	0bdb      	lsrs	r3, r3, #15
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
	init->Param.CR6.TS_PP_MODE = ( (init->CR[6]) & AS6031_C6_TS_PP_MODE_Msk ) >> AS6031_C6_TS_PP_MODE_Pos;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	0c1b      	lsrs	r3, r3, #16
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
	init->Param.CR6.TS_CST_RATE = ( (init->CR[6]) & AS6031_C6_TS_CST_RATE_Msk ) >> AS6031_C6_TS_CST_RATE_Pos;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	0c5b      	lsrs	r3, r3, #17
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f003 0307 	and.w	r3, r3, #7
 800120c:	b2da      	uxtb	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	init->Param.CR6.TS_NVR_RATE = ( (init->CR[6]) & AS6031_C6_TS_NVR_RATE_Msk ) >> AS6031_C6_TS_NVR_RATE_Pos;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	0d1b      	lsrs	r3, r3, #20
 800121a:	b2db      	uxtb	r3, r3
 800121c:	f003 030f 	and.w	r3, r3, #15
 8001220:	b2da      	uxtb	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
	init->Param.CR6.HIDDEN_25_24 = ( (init->CR[6]) & AS6031_C6_HIDDEN_25_24_Msk ) >> AS6031_C6_HIDDEN_25_24_Pos;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	0e1b      	lsrs	r3, r3, #24
 800122e:	b2db      	uxtb	r3, r3
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	b2da      	uxtb	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	init->Param.CR6.HIDDEN_30_26 = ( (init->CR[6]) & AS6031_C6_HIDDEN_30_26_Msk ) >> AS6031_C6_HIDDEN_30_26_Pos;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	0e9b      	lsrs	r3, r3, #26
 8001242:	b2db      	uxtb	r3, r3
 8001244:	f003 031f 	and.w	r3, r3, #31
 8001248:	b2da      	uxtb	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	init->Param.CR6.TS_CST_MODE = ( (init->CR[6]) & AS6031_C6_TS_CST_MODE_Msk ) >> AS6031_C6_TS_CST_MODE_Pos;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	0fdb      	lsrs	r3, r3, #31
 8001256:	b2da      	uxtb	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	/* Parameter of CR[7] */
	init->Param.CR7.TM_RATE = ( (init->CR[7]) & AS6031_C7_TM_RATE_Msk ) >> AS6031_C7_TM_RATE_Pos;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	init->Param.CR7.TPM_PAUSE = ( (init->CR[7]) & AS6031_C7_TPM_PAUSE_Msk ) >> AS6031_C7_TPM_PAUSE_Pos;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69db      	ldr	r3, [r3, #28]
 8001270:	0a9b      	lsrs	r3, r3, #10
 8001272:	b2db      	uxtb	r3, r3
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	b2da      	uxtb	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	init->Param.CR7.TM_MODE = ( (init->CR[7]) & AS6031_C7_TM_MODE_Msk ) >> AS6031_C7_TM_MODE_Pos;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	0b5b      	lsrs	r3, r3, #13
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f003 0307 	and.w	r3, r3, #7
 800128c:	b2da      	uxtb	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	init->Param.CR7.HIDDEN_16_16 = ( (init->CR[7]) & AS6031_C7_HIDDEN_16_16_Msk ) >> AS6031_C7_HIDDEN_16_16_Pos;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69db      	ldr	r3, [r3, #28]
 8001298:	0c1b      	lsrs	r3, r3, #16
 800129a:	b2db      	uxtb	r3, r3
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
	init->Param.CR7.TPM_PORT_MODE = ( (init->CR[7]) & AS6031_C7_TPM_PORT_MODE_Msk ) >> AS6031_C7_TPM_PORT_MODE_Pos;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	69db      	ldr	r3, [r3, #28]
 80012ac:	0c5b      	lsrs	r3, r3, #17
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	init->Param.CR7.TM_PORT_ORDER = ( (init->CR[7]) & AS6031_C7_TM_PORT_ORDER_Msk ) >> AS6031_C7_TM_PORT_ORDER_Pos;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	0c9b      	lsrs	r3, r3, #18
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	init->Param.CR7.TPM_CLOAD_TRIM = ( (init->CR[7]) & AS6031_C7_TPM_CLOAD_TRIM_Msk ) >> AS6031_C7_TPM_CLOAD_TRIM_Pos;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69db      	ldr	r3, [r3, #28]
 80012d4:	0d1b      	lsrs	r3, r3, #20
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	init->Param.CR7.TPM_CYCLE_SEL = ( (init->CR[7]) & AS6031_C7_TPM_CYCLE_SEL_Msk ) >> AS6031_C7_TPM_CYCLE_SEL_Pos;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	69db      	ldr	r3, [r3, #28]
 80012e8:	0d9b      	lsrs	r3, r3, #22
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	init->Param.CR7.TPM_FAKE_NO = ( (init->CR[7]) & AS6031_C7_TPM_FAKE_NO_Msk ) >> AS6031_C7_TPM_FAKE_NO_Pos;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	0ddb      	lsrs	r3, r3, #23
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	b2da      	uxtb	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	init->Param.CR7.HIDDEN_31_24 = ( (init->CR[7]) & AS6031_C7_HIDDEN_31_24_Msk ) >> AS6031_C7_HIDDEN_31_24_Pos;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	0e1b      	lsrs	r3, r3, #24
 8001312:	b2da      	uxtb	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	/* Parameter of CR[8] */
	init->Param.CR8.USM_PAUSE = ( (init->CR[8]) & AS6031_C8_USM_PAUSE_Msk ) >> AS6031_C8_USM_PAUSE_Pos;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a1b      	ldr	r3, [r3, #32]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	f003 0307 	and.w	r3, r3, #7
 8001324:	b2da      	uxtb	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	init->Param.CR8.HIDDEN_3_3 = ( (init->CR[8]) & AS6031_C8_HIDDEN_3_3_Msk ) >> AS6031_C8_HIDDEN_3_3_Pos;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	08db      	lsrs	r3, r3, #3
 8001332:	b2db      	uxtb	r3, r3
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	b2da      	uxtb	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	init->Param.CR8.USM_DIR_MODE = ( (init->CR[8]) & AS6031_C8_USM_DIR_MODE_Msk ) >> AS6031_C8_USM_DIR_MODE_Pos;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	091b      	lsrs	r3, r3, #4
 8001346:	b2db      	uxtb	r3, r3
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	b2da      	uxtb	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	init->Param.CR8.USM_NOISE_MASK_WIN = ( (init->CR[8]) & AS6031_C8_USM_NOISE_MASK_WIN_Msk ) >> AS6031_C8_USM_NOISE_MASK_WIN_Pos;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	099b      	lsrs	r3, r3, #6
 800135a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	init->Param.CR8.USM_TO = ( (init->CR[8]) & AS6031_C8_USM_TO_Msk ) >> AS6031_C8_USM_TO_Pos;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	0c1b      	lsrs	r3, r3, #16
 800136a:	b2db      	uxtb	r3, r3
 800136c:	f003 0303 	and.w	r3, r3, #3
 8001370:	b2da      	uxtb	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	init->Param.CR8.HIDDEN_18_18 = ( (init->CR[8]) & AS6031_C8_HIDDEN_18_18_Msk ) >> AS6031_C8_HIDDEN_18_18_Pos;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	0c9b      	lsrs	r3, r3, #18
 800137e:	b2db      	uxtb	r3, r3
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	b2da      	uxtb	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	init->Param.CR8.USM_RLS_MODE = ( (init->CR[8]) & AS6031_C8_USM_RLS_MODE_Msk ) >> AS6031_C8_USM_RLS_MODE_Pos;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	0cdb      	lsrs	r3, r3, #19
 8001392:	b2db      	uxtb	r3, r3
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	b2da      	uxtb	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	init->Param.CR8.ZCC_RATE = ( (init->CR[8]) & AS6031_C8_ZCC_RATE_Msk ) >> AS6031_C8_ZCC_RATE_Pos;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	0d1b      	lsrs	r3, r3, #20
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	f003 0307 	and.w	r3, r3, #7
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	init->Param.CR8.HIDDEN_31_24 = ( (init->CR[8]) & AS6031_C8_HIDDEN_31_24_Msk ) >> AS6031_C8_HIDDEN_31_24_Pos;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	0dda      	lsrs	r2, r3, #23
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	/* Parameter of CR[9] */
	init->Param.CR9.FBG_CLK_DIV = ( (init->CR[9]) & AS6031_C9_FBG_CLK_DIV_Msk ) >> AS6031_C9_FBG_CLK_DIV_Pos;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	init->Param.CR9.FBG_MODE = ( (init->CR[9]) & AS6031_C9_FBG_MODE_Msk ) >> AS6031_C9_FBG_MODE_Pos;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d6:	09db      	lsrs	r3, r3, #7
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	init->Param.CR9.FBG_PHASE_INS = ( (init->CR[9]) & AS6031_C9_FBG_PHASE_INS_Msk ) >> AS6031_C9_FBG_PHASE_INS_Pos;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	0a1b      	lsrs	r3, r3, #8
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	init->Param.CR9.FBG_BURST_PRE = ( (init->CR[9]) & AS6031_C9_FBG_BURST_PRE_Msk ) >> AS6031_C9_FBG_BURST_PRE_Pos;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f8:	0c1b      	lsrs	r3, r3, #16
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001400:	b2da      	uxtb	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
	init->Param.CR9.FBG_BURST_POST = ( (init->CR[9]) & AS6031_C9_FBG_BURST_POST_Msk ) >> AS6031_C9_FBG_BURST_POST_Pos;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140c:	0d9b      	lsrs	r3, r3, #22
 800140e:	b2db      	uxtb	r3, r3
 8001410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001414:	b2da      	uxtb	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	init->Param.CR9.HIDDEN_28_28 = ( (init->CR[9]) & AS6031_C9_HIDDEN_28_28_Msk ) >> AS6031_C9_HIDDEN_28_28_Pos;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001420:	0f1b      	lsrs	r3, r3, #28
 8001422:	b2db      	uxtb	r3, r3
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	b2da      	uxtb	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	init->Param.CR9.HIDDEN_29_29 = ( (init->CR[9]) & AS6031_C9_HIDDEN_29_29_Msk ) >> AS6031_C9_HIDDEN_29_29_Pos;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	0f5b      	lsrs	r3, r3, #29
 8001436:	b2db      	uxtb	r3, r3
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	b2da      	uxtb	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
	init->Param.CR9.TOF_HIT_MODE = ( (init->CR[9]) & AS6031_C9_TOF_HIT_MODE_Msk ) >> AS6031_C9_TOF_HIT_MODE_Pos;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001448:	0f9b      	lsrs	r3, r3, #30
 800144a:	b2db      	uxtb	r3, r3
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	b2da      	uxtb	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	init->Param.CR9.HIDDEN_31_31 = ( (init->CR[9]) & AS6031_C9_HIDDEN_31_31_Msk ) >> AS6031_C9_HIDDEN_31_31_Pos;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145c:	0fdb      	lsrs	r3, r3, #31
 800145e:	b2da      	uxtb	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	/* Parameter of CR[10] */
	init->Param.CR10.HIDDEN_0_0 = ( (init->CR[10]) & AS6031_CA_HIDDEN_0_0_Msk ) >> AS6031_CA_HIDDEN_0_0_Pos;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146a:	b2db      	uxtb	r3, r3
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	b2da      	uxtb	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	init->Param.CR10.TOF_HIT_START = ( (init->CR[10]) & AS6031_CA_TOF_HIT_START_Msk ) >> AS6031_CA_TOF_HIT_START_Pos;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147c:	085b      	lsrs	r3, r3, #1
 800147e:	b2db      	uxtb	r3, r3
 8001480:	f003 031f 	and.w	r3, r3, #31
 8001484:	b2da      	uxtb	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
	init->Param.CR10.TOF_HIT_IGN = ( (init->CR[10]) & AS6031_CA_TOF_HIT_IGN_Msk ) >> AS6031_CA_TOF_HIT_IGN_Pos;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001490:	099b      	lsrs	r3, r3, #6
 8001492:	b2db      	uxtb	r3, r3
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	b2da      	uxtb	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
	init->Param.CR10.TOF_HIT_SUM_NO = ( (init->CR[10]) & AS6031_CA_TOF_HIT_SUM_NO_Msk ) >> AS6031_CA_TOF_HIT_SUM_NO_Pos;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a4:	0a1b      	lsrs	r3, r3, #8
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	f003 031f 	and.w	r3, r3, #31
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	init->Param.CR10.TOF_HIT_END = ( (init->CR[10]) & AS6031_CA_TOF_HIT_END_Msk ) >> AS6031_CA_TOF_HIT_END_Pos;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b8:	0b5b      	lsrs	r3, r3, #13
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
	init->Param.CR10.HIDDEN_21_20 = ( (init->CR[10]) & AS6031_CA_HIDDEN_21_20_Msk ) >> AS6031_CA_HIDDEN_21_20_Pos;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014cc:	0d1b      	lsrs	r3, r3, #20
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
	init->Param.CR10.TOF_EDGE_MODE = ( (init->CR[10]) & AS6031_CA_TOF_EDGE_MODE_Msk ) >> AS6031_CA_TOF_EDGE_MODE_Pos;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e0:	0d9b      	lsrs	r3, r3, #22
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
	init->Param.CR10.TOF_RATE_INIT = ( (init->CR[10]) & AS6031_CA_TOF_RATE_INIT_Msk ) >> AS6031_CA_TOF_RATE_INIT_Pos;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f4:	0e1b      	lsrs	r3, r3, #24
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
	init->Param.CR10.NOT_USED_31_30 = ( (init->CR[10]) & AS6031_CA_NOT_USED_31_30_Msk ) >> AS6031_CA_NOT_USED_31_30_Pos;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001508:	0f9b      	lsrs	r3, r3, #30
 800150a:	b2da      	uxtb	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
	/* Parameter of CR[11] */
	init->Param.CR11.AM_RATE = ( (init->CR[11]) & AS6031_CB_AM_RATE_Msk ) >> AS6031_CB_AM_RATE_Pos;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001516:	b2db      	uxtb	r3, r3
 8001518:	f003 0307 	and.w	r3, r3, #7
 800151c:	b2da      	uxtb	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
	init->Param.CR11.HIDEN_3_3 = ( (init->CR[11]) & AS6031_CB_HIDEN_3_3_Msk ) >> AS6031_CB_HIDEN_3_3_Pos;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001528:	08db      	lsrs	r3, r3, #3
 800152a:	b2db      	uxtb	r3, r3
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	b2da      	uxtb	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
	init->Param.CR11.AM_PD_END = ( (init->CR[11]) & AS6031_CB_AM_PD_END_Msk ) >> AS6031_CB_AM_PD_END_Pos;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153c:	091b      	lsrs	r3, r3, #4
 800153e:	b2db      	uxtb	r3, r3
 8001540:	f003 031f 	and.w	r3, r3, #31
 8001544:	b2da      	uxtb	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
	init->Param.CR11.HIDDEN_11_9 = ( (init->CR[11]) & AS6031_CB_HIDDEN_11_9_Msk ) >> AS6031_CB_HIDDEN_11_9_Pos;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001550:	0a5b      	lsrs	r3, r3, #9
 8001552:	b2db      	uxtb	r3, r3
 8001554:	f003 0307 	and.w	r3, r3, #7
 8001558:	b2da      	uxtb	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
	init->Param.CR11.AMC_RATE = ( (init->CR[11]) & AS6031_CB_AMC_RATE_Msk ) >> AS6031_CB_AMC_RATE_Pos;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001564:	0b1b      	lsrs	r3, r3, #12
 8001566:	b2db      	uxtb	r3, r3
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	b2da      	uxtb	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
	init->Param.CR11.PWD_EN = ( (init->CR[11]) & AS6031_CB_PWD_EN_Msk ) >> AS6031_CB_PWD_EN_Pos;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001578:	0bdb      	lsrs	r3, r3, #15
 800157a:	b2db      	uxtb	r3, r3
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	b2da      	uxtb	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
	init->Param.CR11.PGA_TRIM = ( (init->CR[11]) & AS6031_CB_PGA_TRIM_Msk ) >> AS6031_CB_PGA_TRIM_Pos;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158c:	0c1b      	lsrs	r3, r3, #16
 800158e:	b2db      	uxtb	r3, r3
 8001590:	f003 0307 	and.w	r3, r3, #7
 8001594:	b2da      	uxtb	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	init->Param.CR11.HIDDEN_19_19 = ( (init->CR[11]) & AS6031_CB_HIDDEN_19_19_Msk ) >> AS6031_CB_HIDDEN_19_19_Pos;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a0:	0cdb      	lsrs	r3, r3, #19
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	init->Param.CR11.PGA_EN_MODE = ( (init->CR[11]) & AS6031_CB_PGA_EN_MODE_Msk ) >> AS6031_CB_PGA_EN_MODE_Pos;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b4:	0d1b      	lsrs	r3, r3, #20
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
	init->Param.CR11.PGA_MODE = ( (init->CR[11]) & AS6031_CB_PGA_MODE_Msk ) >> AS6031_CB_PGA_MODE_Pos;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c8:	0d5b      	lsrs	r3, r3, #21
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
	init->Param.CR11.HIDDEN_22_22 = ( (init->CR[11]) & AS6031_CB_HIDDEN_22_22_Msk ) >> AS6031_CB_HIDDEN_22_22_Pos;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015dc:	0d9b      	lsrs	r3, r3, #22
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	init->Param.CR11.AM_PD_START_MODE = ( (init->CR[11]) & AS6031_CB_AM_PD_START_MODE_Msk ) >> AS6031_CB_AM_PD_START_MODE_Pos;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f0:	0ddb      	lsrs	r3, r3, #23
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	init->Param.CR11.ZCD_FHL_INIT = ( (init->CR[11]) & AS6031_CB_ZCD_FHL_INIT_Msk ) >> AS6031_CB_ZCD_FHL_INIT_Pos;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001604:	0e1b      	lsrs	r3, r3, #24
 8001606:	b2da      	uxtb	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	/* Parameter of CR[12] */
	init->Param.CR12.TRIM1 = ( (init->CR[12]) & AS6031_CC_TRIM1_Msk ) >> AS6031_CC_TRIM1_Pos;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	/* Parameter of CR[13] */
	init->Param.CR13.TRIM2 = ( (init->CR[13]) & AS6031_CD_TRIM2_Msk ) >> AS6031_CD_TRIM2_Pos;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	/* Parameter of CR[14] */
	init->Param.CR14.TRIM3 = ( (init->CR[14]) & AS6031_CE_TRIM3_Msk ) >> AS6031_CE_TRIM3_Pos;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	/* Parameter of CR[15] */
	init->Param.CR15.TOF_RATE = ( (init->CR[15]) & AS6031_D0_TOF_RATE_Msk ) >> AS6031_D0_TOF_RATE_Pos;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001630:	b2db      	uxtb	r3, r3
 8001632:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001636:	b2da      	uxtb	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
	init->Param.CR15.NOT_USED_31_6 = ( (init->CR[15]) & AS6031_D0_NOT_USED_31_6_Msk ) >> AS6031_D0_NOT_USED_31_6_Pos;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001642:	099a      	lsrs	r2, r3, #6
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	/* Parameter of CR[16] */
	init->Param.CR16.USM_RLS_DLY_U = ( (init->CR[16]) & AS6031_D1_USM_RLS_DLY_U_Msk ) >> AS6031_D1_USM_RLS_DLY_U_Pos;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	init->Param.CR16.NOT_USED_31_19 = ( (init->CR[16]) & AS6031_D1_NOT_USED_31_19_Msk ) >> AS6031_D1_NOT_USED_31_19_Pos;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	0cda      	lsrs	r2, r3, #19
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	/* Parameter of CR[17] */
	init->Param.CR17.USM_RLS_DLY_D = ( (init->CR[17]) & AS6031_D2_USM_RLS_DLY_D_Msk ) >> AS6031_D2_USM_RLS_DLY_D_Pos;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001668:	f3c3 0212 	ubfx	r2, r3, #0, #19
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	init->Param.CR17.NOT_USED_31_19 = ( (init->CR[17]) & AS6031_D2_NOT_USED_31_19_Msk ) >> AS6031_D2_NOT_USED_31_19_Pos;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	0cda      	lsrs	r2, r3, #19
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	/* Parameter of CR[18] */
	init->Param.CR18.ZCD_FHL_U = ( (init->CR[18]) & AS6031_DA_ZCD_FHL_U_Msk ) >> AS6031_DA_ZCD_FHL_U_Pos;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001682:	b2da      	uxtb	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
	init->Param.CR18.NOT_USED_31_8 = ( (init->CR[18]) & AS6031_DA_NOT_USED_31_8_Msk ) >> AS6031_DA_NOT_USED_31_8_Pos;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800168e:	0a1a      	lsrs	r2, r3, #8
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	/* Parameter of CR[19] */
	init->Param.CR19.ZCD_FHL_D = ( (init->CR[19]) & AS6031_DB_ZCD_FHL_D_Msk ) >> AS6031_DB_ZCD_FHL_D_Pos;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	b2da      	uxtb	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
	init->Param.CR19.NOT_USED_31_8 = ( (init->CR[19]) & AS6031_DB_NOT_USED_31_8_Msk ) >> AS6031_DB_NOT_USED_31_8_Pos;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a6:	0a1a      	lsrs	r2, r3, #8
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <AS6031_Init_CFG>:
  * @param  init pointer to a AS6031_InitTypeDef structure that contains
  *               the configuration information for the specified device.
  * @param  array pointer to declarated configuration register for the specified device.
  * @retval None
  */
void AS6031_Init_CFG(AS6031_InitTypeDef* init, __AS6031_CFG_Declaration* array)  {
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b084      	sub	sp, #16
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	6039      	str	r1, [r7, #0]
	uint8_t idx;
	/* Update content of CR for external usage */
	for (idx = 0; idx <= __AS6031_CFG_Array_Size; idx++) {
 80016c4:	2300      	movs	r3, #0
 80016c6:	73fb      	strb	r3, [r7, #15]
 80016c8:	e00b      	b.n	80016e2 <AS6031_Init_CFG+0x28>
		init->CR[idx] = array[idx];
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	4413      	add	r3, r2
 80016d2:	7bfa      	ldrb	r2, [r7, #15]
 80016d4:	6819      	ldr	r1, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (idx = 0; idx <= __AS6031_CFG_Array_Size; idx++) {
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	3301      	adds	r3, #1
 80016e0:	73fb      	strb	r3, [r7, #15]
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	2b14      	cmp	r3, #20
 80016e6:	d9f0      	bls.n	80016ca <AS6031_Init_CFG+0x10>
	}

	/* Update Parameter */
	AS6031_Update_Param(init);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff facd 	bl	8000c88 <AS6031_Update_Param>

}
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016fe:	f000 fbbf 	bl	8001e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001702:	f000 f9d3 	bl	8001aac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001706:	f000 fa61 	bl	8001bcc <MX_GPIO_Init>
  MX_SPI1_Init();
 800170a:	f000 fa21 	bl	8001b50 <MX_SPI1_Init>
  DUT.CR[6] = 0x400000DC;

  AS6031_Update_Param(&DUT);
*/

  AS6031_Init_CFG(&DUT, Reg);
 800170e:	4957      	ldr	r1, [pc, #348]	; (800186c <main+0x174>)
 8001710:	4857      	ldr	r0, [pc, #348]	; (8001870 <main+0x178>)
 8001712:	f7ff ffd2 	bl	80016ba <AS6031_Init_CFG>

  // Reset DUT
  Write_Opcode(RC_SYS_RST);
 8001716:	2099      	movs	r0, #153	; 0x99
 8001718:	f7ff f990 	bl	8000a3c <Write_Opcode>
  DUT.State = AS6031_STATE_RESET;
 800171c:	4b54      	ldr	r3, [pc, #336]	; (8001870 <main+0x178>)
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124

  HAL_Delay(3); // Datasheet -> Delay = 1ms... BUT at least 3ms are needed _MH
 8001724:	2003      	movs	r0, #3
 8001726:	f000 fc27 	bl	8001f78 <HAL_Delay>

  // Write Configuration (0xC0 - 0xCE, 0xD0 - 0xD2, 0xDA - 0xDB)
  int offset = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
  int i, j = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	607b      	str	r3, [r7, #4]

  for (i = 0; i <= 19; i++) {
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	e028      	b.n	800178a <main+0x92>
	  if (i == 0) {
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d103      	bne.n	8001746 <main+0x4e>
		  offset = 0xC0;
 800173e:	23c0      	movs	r3, #192	; 0xc0
 8001740:	60fb      	str	r3, [r7, #12]
		  j = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
	  }
	  if (i == 15) {
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	2b0f      	cmp	r3, #15
 800174a:	d103      	bne.n	8001754 <main+0x5c>
		  offset = 0xD0;
 800174c:	23d0      	movs	r3, #208	; 0xd0
 800174e:	60fb      	str	r3, [r7, #12]
		  j = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	607b      	str	r3, [r7, #4]
	  }
	  if (i == 18) {
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	2b12      	cmp	r3, #18
 8001758:	d103      	bne.n	8001762 <main+0x6a>
		  offset = 0xDA;
 800175a:	23da      	movs	r3, #218	; 0xda
 800175c:	60fb      	str	r3, [r7, #12]
		  j = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
	  }
	  Write_Dword(RC_RAA_WR, (offset+j), DUT.CR[i]);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	b2da      	uxtb	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	4413      	add	r3, r2
 800176c:	b2d9      	uxtb	r1, r3
 800176e:	4a40      	ldr	r2, [pc, #256]	; (8001870 <main+0x178>)
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001776:	461a      	mov	r2, r3
 8001778:	205a      	movs	r0, #90	; 0x5a
 800177a:	f7ff f9c7 	bl	8000b0c <Write_Dword>
	  j++;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3301      	adds	r3, #1
 8001782:	607b      	str	r3, [r7, #4]
  for (i = 0; i <= 19; i++) {
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	3301      	adds	r3, #1
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2b13      	cmp	r3, #19
 800178e:	ddd3      	ble.n	8001738 <main+0x40>
  }

  Write_Opcode(RC_MCT_ON);
 8001790:	208b      	movs	r0, #139	; 0x8b
 8001792:	f7ff f953 	bl	8000a3c <Write_Opcode>
  // Phase 2: Preparation (common for all procedures)
  // Phase 3: FW Update (different for procedures [A], [B], [C], [D] )
  // Phase 4: FW Retention Check (common for all procedures)

  // Phase1: Initial Wait Time
  Write_Opcode(RC_SYS_RST);
 8001796:	2099      	movs	r0, #153	; 0x99
 8001798:	f7ff f950 	bl	8000a3c <Write_Opcode>
  DUT.State = AS6031_STATE_RESET;
 800179c:	4b34      	ldr	r3, [pc, #208]	; (8001870 <main+0x178>)
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124

  HAL_Delay(3);
 80017a4:	2003      	movs	r0, #3
 80017a6:	f000 fbe7 	bl	8001f78 <HAL_Delay>

  // Phase 2: Preparation
  Write_Opcode(RC_BM_REQ);
 80017aa:	2088      	movs	r0, #136	; 0x88
 80017ac:	f7ff f946 	bl	8000a3c <Write_Opcode>
  Write_Dword(RC_RAA_WR, 0xC0, 0x48DBA399);
 80017b0:	4a30      	ldr	r2, [pc, #192]	; (8001874 <main+0x17c>)
 80017b2:	21c0      	movs	r1, #192	; 0xc0
 80017b4:	205a      	movs	r0, #90	; 0x5a
 80017b6:	f7ff f9a9 	bl	8000b0c <Write_Dword>
  Write_Dword(RC_RAA_WR, 0xCD, 0x40100000);
 80017ba:	4a2f      	ldr	r2, [pc, #188]	; (8001878 <main+0x180>)
 80017bc:	21cd      	movs	r1, #205	; 0xcd
 80017be:	205a      	movs	r0, #90	; 0x5a
 80017c0:	f7ff f9a4 	bl	8000b0c <Write_Dword>
  Write_Dword(RC_RAA_WR, 0xC6, 0x00001000);
 80017c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017c8:	21c6      	movs	r1, #198	; 0xc6
 80017ca:	205a      	movs	r0, #90	; 0x5a
 80017cc:	f7ff f99e 	bl	8000b0c <Write_Dword>
  Write_Opcode(RC_SV_INIT);
 80017d0:	209c      	movs	r0, #156	; 0x9c
 80017d2:	f7ff f933 	bl	8000a3c <Write_Opcode>
  Write_Opcode(RC_MCT_OFF);
 80017d6:	208a      	movs	r0, #138	; 0x8a
 80017d8:	f7ff f930 	bl	8000a3c <Write_Opcode>
  HAL_Delay(1);
 80017dc:	2001      	movs	r0, #1
 80017de:	f000 fbcb 	bl	8001f78 <HAL_Delay>
  Write_Opcode2(RC_MT_REQ, 0x00);
 80017e2:	2100      	movs	r1, #0
 80017e4:	20da      	movs	r0, #218	; 0xda
 80017e6:	f7ff f945 	bl	8000a74 <Write_Opcode2>
  HAL_Delay(1);
 80017ea:	2001      	movs	r0, #1
 80017ec:	f000 fbc4 	bl	8001f78 <HAL_Delay>
  Write_Dword(RC_RAA_WR, 0xDD, 0x00000007);
 80017f0:	2207      	movs	r2, #7
 80017f2:	21dd      	movs	r1, #221	; 0xdd
 80017f4:	205a      	movs	r0, #90	; 0x5a
 80017f6:	f7ff f989 	bl	8000b0c <Write_Dword>
  Write_Opcode(RC_RF_CLR);
 80017fa:	2089      	movs	r0, #137	; 0x89
 80017fc:	f7ff f91e 	bl	8000a3c <Write_Opcode>
  Write_Dword(RC_RAA_WR, 0xC4, 0x000AF000);
 8001800:	f44f 222f 	mov.w	r2, #716800	; 0xaf000
 8001804:	21c4      	movs	r1, #196	; 0xc4
 8001806:	205a      	movs	r0, #90	; 0x5a
 8001808:	f7ff f980 	bl	8000b0c <Write_Dword>
  Write_Opcode(RC_BM_RLS);
 800180c:	2087      	movs	r0, #135	; 0x87
 800180e:	f7ff f915 	bl	8000a3c <Write_Opcode>

  Write_Dword(RC_RAA_WR, 0xDF, 0x50F5B8CA);
 8001812:	4a1a      	ldr	r2, [pc, #104]	; (800187c <main+0x184>)
 8001814:	21df      	movs	r1, #223	; 0xdf
 8001816:	205a      	movs	r0, #90	; 0x5a
 8001818:	f7ff f978 	bl	8000b0c <Write_Dword>
  Write_Dword(RC_RAA_WR, 0xDE, 0x00100000);
 800181c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001820:	21de      	movs	r1, #222	; 0xde
 8001822:	205a      	movs	r0, #90	; 0x5a
 8001824:	f7ff f972 	bl	8000b0c <Write_Dword>
  while(Read_Dword_Bits(RC_RAA_RD, 0xE0, 1, 1) == 0) {};
 8001828:	bf00      	nop
 800182a:	2301      	movs	r3, #1
 800182c:	2201      	movs	r2, #1
 800182e:	21e0      	movs	r1, #224	; 0xe0
 8001830:	207a      	movs	r0, #122	; 0x7a
 8001832:	f7ff f9d5 	bl	8000be0 <Read_Dword_Bits>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0f6      	beq.n	800182a <main+0x132>
  Write_Dword(RC_RAA_WR, 0xDE, 0x00080000);
 800183c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001840:	21de      	movs	r1, #222	; 0xde
 8001842:	205a      	movs	r0, #90	; 0x5a
 8001844:	f7ff f962 	bl	8000b0c <Write_Dword>
  while(Read_Dword_Bits(RC_RAA_RD, 0xE0, 1, 1) == 0) {};
 8001848:	bf00      	nop
 800184a:	2301      	movs	r3, #1
 800184c:	2201      	movs	r2, #1
 800184e:	21e0      	movs	r1, #224	; 0xe0
 8001850:	207a      	movs	r0, #122	; 0x7a
 8001852:	f7ff f9c5 	bl	8000be0 <Read_Dword_Bits>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f6      	beq.n	800184a <main+0x152>

  // Phase 3: FW Update
  Read_Dword(RC_RAA_RD, 0xEC);
 800185c:	21ec      	movs	r1, #236	; 0xec
 800185e:	207a      	movs	r0, #122	; 0x7a
 8001860:	f7ff f988 	bl	8000b74 <Read_Dword>

  // Write FWC
  for (i = 32; i <= FWC_Length; i++) {
 8001864:	2320      	movs	r3, #32
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	e017      	b.n	800189a <main+0x1a2>
 800186a:	bf00      	nop
 800186c:	20000004 	.word	0x20000004
 8001870:	20000208 	.word	0x20000208
 8001874:	48dba399 	.word	0x48dba399
 8001878:	40100000 	.word	0x40100000
 800187c:	50f5b8ca 	.word	0x50f5b8ca
	  Write_Byte2(RC_FWC_WR, i, FWC[i]);  // Writing FWC, bytewise with two byte address
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	b299      	uxth	r1, r3
 8001884:	4a7c      	ldr	r2, [pc, #496]	; (8001a78 <main+0x380>)
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	4413      	add	r3, r2
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	205c      	movs	r0, #92	; 0x5c
 8001890:	f7ff f912 	bl	8000ab8 <Write_Byte2>
  for (i = 32; i <= FWC_Length; i++) {
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	3301      	adds	r3, #1
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	4b78      	ldr	r3, [pc, #480]	; (8001a7c <main+0x384>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68ba      	ldr	r2, [r7, #8]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	dded      	ble.n	8001880 <main+0x188>
  }

  // Write FWD
  Write_Dword(RC_RAA_WR_NVRAM, 0x00, 0x0000AB6A); // Writing Firmware Code User, Checksum
 80018a4:	f64a 326a 	movw	r2, #43882	; 0xab6a
 80018a8:	2100      	movs	r1, #0
 80018aa:	205b      	movs	r0, #91	; 0x5b
 80018ac:	f7ff f92e 	bl	8000b0c <Write_Dword>
  Write_Dword(RC_RAA_WR_NVRAM, 0x01, 0x00000556); // Writing Firmware Data User, Checksum
 80018b0:	f240 5256 	movw	r2, #1366	; 0x556
 80018b4:	2101      	movs	r1, #1
 80018b6:	205b      	movs	r0, #91	; 0x5b
 80018b8:	f7ff f928 	bl	8000b0c <Write_Dword>
  Write_Dword(RC_RAA_WR_NVRAM, 0x02, 0x00010000); // Writing FWD_SIMPLE_SCALE (fd16)
 80018bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018c0:	2102      	movs	r1, #2
 80018c2:	205b      	movs	r0, #91	; 0x5b
 80018c4:	f7ff f922 	bl	8000b0c <Write_Dword>
  Write_Dword(RC_RAA_WR_NVRAM, 0x03, 0x00000000); // Writing FWD_ZERO_OFFSET
 80018c8:	2200      	movs	r2, #0
 80018ca:	2103      	movs	r1, #3
 80018cc:	205b      	movs	r0, #91	; 0x5b
 80018ce:	f7ff f91d 	bl	8000b0c <Write_Dword>
  Write_Dword(RC_RAA_WR_NVRAM, 0x04, 0x051EB852); // Writing FWD_MAX_TOF_DIFF
 80018d2:	4a6b      	ldr	r2, [pc, #428]	; (8001a80 <main+0x388>)
 80018d4:	2104      	movs	r1, #4
 80018d6:	205b      	movs	r0, #91	; 0x5b
 80018d8:	f7ff f918 	bl	8000b0c <Write_Dword>
  Write_Dword(RC_RAA_WR_NVRAM, 0x05, 0xFAE147AE); // Writing FWD_NEG_TOF_DIFF_LIMIT
 80018dc:	4a69      	ldr	r2, [pc, #420]	; (8001a84 <main+0x38c>)
 80018de:	2105      	movs	r1, #5
 80018e0:	205b      	movs	r0, #91	; 0x5b
 80018e2:	f7ff f913 	bl	8000b0c <Write_Dword>

  Write_Dword(RC_RAA_WR_NVRAM, 0x5B, 0x0000000A); // Writing FWD_R_PULSE_PER_LITER
 80018e6:	220a      	movs	r2, #10
 80018e8:	215b      	movs	r1, #91	; 0x5b
 80018ea:	205b      	movs	r0, #91	; 0x5b
 80018ec:	f7ff f90e 	bl	8000b0c <Write_Dword>
  Write_Dword(RC_RAA_WR_NVRAM, 0x5C, 0x000003E8); // Writing FWD_R_PULSE_MAX_FLOW
 80018f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018f4:	215c      	movs	r1, #92	; 0x5c
 80018f6:	205b      	movs	r0, #91	; 0x5b
 80018f8:	f7ff f908 	bl	8000b0c <Write_Dword>

  Write_Dword(RC_RAA_WR_NVRAM, 0x67, 0x00000000); // Writing FWD_USM_RLS_DLY_INIT
 80018fc:	2200      	movs	r2, #0
 80018fe:	2167      	movs	r1, #103	; 0x67
 8001900:	205b      	movs	r0, #91	; 0x5b
 8001902:	f7ff f903 	bl	8000b0c <Write_Dword>

  Write_Dword(RC_RAA_WR_NVRAM, 0x6B, 0xABCD7654); // Writing Boot-Loader Release Code
 8001906:	4a60      	ldr	r2, [pc, #384]	; (8001a88 <main+0x390>)
 8001908:	216b      	movs	r1, #107	; 0x6b
 800190a:	205b      	movs	r0, #91	; 0x5b
 800190c:	f7ff f8fe 	bl	8000b0c <Write_Dword>
  //Write_Dword(RC_RAA_WR_NVRAM, 0x74, 0x207807A4); // CR_USM_PRC USM Processing
  //Write_Dword(RC_RAA_WR_NVRAM, 0x75, 0x60150202); // CR_USM_FRC USM Fire & Receive Control
  //Write_Dword(RC_RAA_WR_NVRAM, 0x76, 0x00002A0E); // CR_USM_TOF Time Of Flight Rate init value
  //Write_Dword(RC_RAA_WR_NVRAM, 0x77, 0x23209E71); // CR_USM_AM Amplitude and FHL

  Write_Dword(RC_RAA_WR, 0xDF, 0x50F5B8CA);
 8001910:	4a5e      	ldr	r2, [pc, #376]	; (8001a8c <main+0x394>)
 8001912:	21df      	movs	r1, #223	; 0xdf
 8001914:	205a      	movs	r0, #90	; 0x5a
 8001916:	f7ff f8f9 	bl	8000b0c <Write_Dword>
  Write_Dword(RC_RAA_WR, 0xDE, 0x00010000);
 800191a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800191e:	21de      	movs	r1, #222	; 0xde
 8001920:	205a      	movs	r0, #90	; 0x5a
 8001922:	f7ff f8f3 	bl	8000b0c <Write_Dword>
  while(Read_Dword_Bits(RC_RAA_RD, 0xE0, 1, 1) == 0) {};
 8001926:	bf00      	nop
 8001928:	2301      	movs	r3, #1
 800192a:	2201      	movs	r2, #1
 800192c:	21e0      	movs	r1, #224	; 0xe0
 800192e:	207a      	movs	r0, #122	; 0x7a
 8001930:	f7ff f956 	bl	8000be0 <Read_Dword_Bits>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0f6      	beq.n	8001928 <main+0x230>

  // Phase 4: FW Retention Check
  Write_Dword(RC_RAA_WR, 0xDF, 0x50F5B8CA);
 800193a:	4a54      	ldr	r2, [pc, #336]	; (8001a8c <main+0x394>)
 800193c:	21df      	movs	r1, #223	; 0xdf
 800193e:	205a      	movs	r0, #90	; 0x5a
 8001940:	f7ff f8e4 	bl	8000b0c <Write_Dword>
  Write_Dword(RC_RAA_WR, 0xDE, 0x00100000);
 8001944:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001948:	21de      	movs	r1, #222	; 0xde
 800194a:	205a      	movs	r0, #90	; 0x5a
 800194c:	f7ff f8de 	bl	8000b0c <Write_Dword>
  while(Read_Dword_Bits(RC_RAA_RD, 0xE0, 1, 1) == 0) {};
 8001950:	bf00      	nop
 8001952:	2301      	movs	r3, #1
 8001954:	2201      	movs	r2, #1
 8001956:	21e0      	movs	r1, #224	; 0xe0
 8001958:	207a      	movs	r0, #122	; 0x7a
 800195a:	f7ff f941 	bl	8000be0 <Read_Dword_Bits>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0f6      	beq.n	8001952 <main+0x25a>
  Write_Dword(RC_RAA_WR, 0xDE, 0x00080000);
 8001964:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001968:	21de      	movs	r1, #222	; 0xde
 800196a:	205a      	movs	r0, #90	; 0x5a
 800196c:	f7ff f8ce 	bl	8000b0c <Write_Dword>
  while(Read_Dword_Bits(RC_RAA_RD, 0xE0, 1, 1) == 0) {};
 8001970:	bf00      	nop
 8001972:	2301      	movs	r3, #1
 8001974:	2201      	movs	r2, #1
 8001976:	21e0      	movs	r1, #224	; 0xe0
 8001978:	207a      	movs	r0, #122	; 0x7a
 800197a:	f7ff f931 	bl	8000be0 <Read_Dword_Bits>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0f6      	beq.n	8001972 <main+0x27a>
  Write_Dword(RC_RAA_WR,  0xD3, 0x0007F000);
 8001984:	f44f 22fe 	mov.w	r2, #520192	; 0x7f000
 8001988:	21d3      	movs	r1, #211	; 0xd3
 800198a:	205a      	movs	r0, #90	; 0x5a
 800198c:	f7ff f8be 	bl	8000b0c <Write_Dword>
  HAL_Delay(offset); // After initialization checksum error flags, delay of at least 34ms are needed _MH
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4618      	mov	r0, r3
 8001994:	f000 faf0 	bl	8001f78 <HAL_Delay>
  Write_Opcode(RC_FW_CHKSUM);
 8001998:	20b8      	movs	r0, #184	; 0xb8
 800199a:	f7ff f84f 	bl	8000a3c <Write_Opcode>
  while(Read_Dword_Bits(RC_RAA_RD, 0xE0, 3, 3) == 0) {};
 800199e:	bf00      	nop
 80019a0:	2303      	movs	r3, #3
 80019a2:	2203      	movs	r2, #3
 80019a4:	21e0      	movs	r1, #224	; 0xe0
 80019a6:	207a      	movs	r0, #122	; 0x7a
 80019a8:	f7ff f91a 	bl	8000be0 <Read_Dword_Bits>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f6      	beq.n	80019a0 <main+0x2a8>
  Read_Dword(RC_RAA_RD, 0xD3);
 80019b2:	21d3      	movs	r1, #211	; 0xd3
 80019b4:	207a      	movs	r0, #122	; 0x7a
 80019b6:	f7ff f8dd 	bl	8000b74 <Read_Dword>

  // END
  Write_Opcode(RC_SYS_RST);
 80019ba:	2099      	movs	r0, #153	; 0x99
 80019bc:	f7ff f83e 	bl	8000a3c <Write_Opcode>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  N_Measure_Cycles++;
 80019c0:	4b33      	ldr	r3, [pc, #204]	; (8001a90 <main+0x398>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	3301      	adds	r3, #1
 80019c6:	4a32      	ldr	r2, [pc, #200]	; (8001a90 <main+0x398>)
 80019c8:	6013      	str	r3, [r2, #0]

	  // Wait for INTN
	  // NVIC Functionality to increase the speed of MCU
	  while ( (My_INTN_State==1)) { }; //timeout is missing
 80019ca:	bf00      	nop
 80019cc:	4b31      	ldr	r3, [pc, #196]	; (8001a94 <main+0x39c>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d0fa      	beq.n	80019cc <main+0x2d4>

	  //RAW_Result = Read_Dword(RC_RAA_RD, 0x80);  // FDB_US_TOF_SUM_OF_ALL_U
	  //RAW_Result = Read_Dword(RC_RAA_RD, 0x84);  // FDB_US_TOF_SUM_OF_ALL_D
	  //RAW_Result /= DUT.Param.CR10.TOF_HIT_SUM_NO;  // Divided by number of hits

	  RAW_Result = Read_Dword(RC_RAA_RD, 0x88);  // FDB_US_TOF_0_U
 80019d6:	2188      	movs	r1, #136	; 0x88
 80019d8:	207a      	movs	r0, #122	; 0x7a
 80019da:	f7ff f8cb 	bl	8000b74 <Read_Dword>
 80019de:	ee07 0a90 	vmov	s15, r0
 80019e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019e6:	4b2c      	ldr	r3, [pc, #176]	; (8001a98 <main+0x3a0>)
 80019e8:	edc3 7a00 	vstr	s15, [r3]

	  RAW_Result /= 65536;  //divided by 2^16
 80019ec:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <main+0x3a0>)
 80019ee:	ed93 7a00 	vldr	s14, [r3]
 80019f2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001a9c <main+0x3a4>
 80019f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019fa:	4b27      	ldr	r3, [pc, #156]	; (8001a98 <main+0x3a0>)
 80019fc:	edc3 7a00 	vstr	s15, [r3]
	  Time_Result = RAW_Result * 250 *(1e-9);
 8001a00:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <main+0x3a0>)
 8001a02:	edd3 7a00 	vldr	s15, [r3]
 8001a06:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001aa0 <main+0x3a8>
 8001a0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a0e:	ee17 0a90 	vmov	r0, s15
 8001a12:	f7fe fd3d 	bl	8000490 <__aeabi_f2d>
 8001a16:	a314      	add	r3, pc, #80	; (adr r3, 8001a68 <main+0x370>)
 8001a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1c:	f7fe fd90 	bl	8000540 <__aeabi_dmul>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	f7fe ff9c 	bl	8000964 <__aeabi_d2f>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	4a1d      	ldr	r2, [pc, #116]	; (8001aa4 <main+0x3ac>)
 8001a30:	6013      	str	r3, [r2, #0]

	  Time_Result_ns = TIME_ns(Time_Result); // result in [ns]
 8001a32:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <main+0x3ac>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7fe fd2a 	bl	8000490 <__aeabi_f2d>
 8001a3c:	a30c      	add	r3, pc, #48	; (adr r3, 8001a70 <main+0x378>)
 8001a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a42:	f7fe fd7d 	bl	8000540 <__aeabi_dmul>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f7fe ff89 	bl	8000964 <__aeabi_d2f>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4a14      	ldr	r2, [pc, #80]	; (8001aa8 <main+0x3b0>)
 8001a56:	6013      	str	r3, [r2, #0]

	  // Clear INTN
	  Write_Opcode(RC_IF_CLR);
 8001a58:	208d      	movs	r0, #141	; 0x8d
 8001a5a:	f7fe ffef 	bl	8000a3c <Write_Opcode>

	  HAL_Delay(50); // used for debugging
 8001a5e:	2032      	movs	r0, #50	; 0x32
 8001a60:	f000 fa8a 	bl	8001f78 <HAL_Delay>
	  N_Measure_Cycles++;
 8001a64:	e7ac      	b.n	80019c0 <main+0x2c8>
 8001a66:	bf00      	nop
 8001a68:	e826d695 	.word	0xe826d695
 8001a6c:	3e112e0b 	.word	0x3e112e0b
 8001a70:	00000000 	.word	0x00000000
 8001a74:	41cdcd65 	.word	0x41cdcd65
 8001a78:	20000054 	.word	0x20000054
 8001a7c:	20000178 	.word	0x20000178
 8001a80:	051eb852 	.word	0x051eb852
 8001a84:	fae147ae 	.word	0xfae147ae
 8001a88:	abcd7654 	.word	0xabcd7654
 8001a8c:	50f5b8ca 	.word	0x50f5b8ca
 8001a90:	20000340 	.word	0x20000340
 8001a94:	20000000 	.word	0x20000000
 8001a98:	20000334 	.word	0x20000334
 8001a9c:	47800000 	.word	0x47800000
 8001aa0:	437a0000 	.word	0x437a0000
 8001aa4:	20000338 	.word	0x20000338
 8001aa8:	2000033c 	.word	0x2000033c

08001aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b096      	sub	sp, #88	; 0x58
 8001ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	2244      	movs	r2, #68	; 0x44
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4618      	mov	r0, r3
 8001abc:	f002 fade 	bl	800407c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac0:	463b      	mov	r3, r7
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
 8001acc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ace:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ad2:	f000 fd87 	bl	80025e4 <HAL_PWREx_ControlVoltageScaling>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001adc:	f000 f8f6 	bl	8001ccc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ae4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ae8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001aea:	2310      	movs	r3, #16
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aee:	2302      	movs	r3, #2
 8001af0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001af2:	2302      	movs	r3, #2
 8001af4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001af6:	2301      	movs	r3, #1
 8001af8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001afa:	230a      	movs	r3, #10
 8001afc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001afe:	2307      	movs	r3, #7
 8001b00:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b02:	2302      	movs	r3, #2
 8001b04:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b06:	2302      	movs	r3, #2
 8001b08:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 fdbe 	bl	8002690 <HAL_RCC_OscConfig>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001b1a:	f000 f8d7 	bl	8001ccc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b1e:	230f      	movs	r3, #15
 8001b20:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b22:	2303      	movs	r3, #3
 8001b24:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b26:	2300      	movs	r3, #0
 8001b28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b32:	463b      	mov	r3, r7
 8001b34:	2104      	movs	r1, #4
 8001b36:	4618      	mov	r0, r3
 8001b38:	f001 f986 	bl	8002e48 <HAL_RCC_ClockConfig>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001b42:	f000 f8c3 	bl	8001ccc <Error_Handler>
  }
}
 8001b46:	bf00      	nop
 8001b48:	3758      	adds	r7, #88	; 0x58
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b54:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <MX_SPI1_Init+0x74>)
 8001b56:	4a1c      	ldr	r2, [pc, #112]	; (8001bc8 <MX_SPI1_Init+0x78>)
 8001b58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b5a:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <MX_SPI1_Init+0x74>)
 8001b5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b62:	4b18      	ldr	r3, [pc, #96]	; (8001bc4 <MX_SPI1_Init+0x74>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b68:	4b16      	ldr	r3, [pc, #88]	; (8001bc4 <MX_SPI1_Init+0x74>)
 8001b6a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b6e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b70:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <MX_SPI1_Init+0x74>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001b76:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <MX_SPI1_Init+0x74>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <MX_SPI1_Init+0x74>)
 8001b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b82:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b84:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <MX_SPI1_Init+0x74>)
 8001b86:	2210      	movs	r2, #16
 8001b88:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <MX_SPI1_Init+0x74>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b90:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <MX_SPI1_Init+0x74>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b96:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <MX_SPI1_Init+0x74>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001b9c:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <MX_SPI1_Init+0x74>)
 8001b9e:	2207      	movs	r2, #7
 8001ba0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <MX_SPI1_Init+0x74>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <MX_SPI1_Init+0x74>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bae:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <MX_SPI1_Init+0x74>)
 8001bb0:	f001 fb36 	bl	8003220 <HAL_SPI_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001bba:	f000 f887 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	200001a4 	.word	0x200001a4
 8001bc8:	40013000 	.word	0x40013000

08001bcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd2:	f107 030c 	add.w	r3, r7, #12
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
 8001be0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be2:	4b23      	ldr	r3, [pc, #140]	; (8001c70 <MX_GPIO_Init+0xa4>)
 8001be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be6:	4a22      	ldr	r2, [pc, #136]	; (8001c70 <MX_GPIO_Init+0xa4>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bee:	4b20      	ldr	r3, [pc, #128]	; (8001c70 <MX_GPIO_Init+0xa4>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfa:	4b1d      	ldr	r3, [pc, #116]	; (8001c70 <MX_GPIO_Init+0xa4>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfe:	4a1c      	ldr	r2, [pc, #112]	; (8001c70 <MX_GPIO_Init+0xa4>)
 8001c00:	f043 0302 	orr.w	r3, r3, #2
 8001c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c06:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <MX_GPIO_Init+0xa4>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	607b      	str	r3, [r7, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSN_GPIO_Port, SSN_Pin, GPIO_PIN_SET);
 8001c12:	2201      	movs	r2, #1
 8001c14:	2140      	movs	r1, #64	; 0x40
 8001c16:	4817      	ldr	r0, [pc, #92]	; (8001c74 <MX_GPIO_Init+0xa8>)
 8001c18:	f000 fca6 	bl	8002568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INTN_Pin */
  GPIO_InitStruct.Pin = INTN_Pin;
 8001c1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001c22:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001c26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INTN_GPIO_Port, &GPIO_InitStruct);
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	4619      	mov	r1, r3
 8001c32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c36:	f000 fad5 	bl	80021e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SSN_Pin */
  GPIO_InitStruct.Pin = SSN_Pin;
 8001c3a:	2340      	movs	r3, #64	; 0x40
 8001c3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c42:	2301      	movs	r3, #1
 8001c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c46:	2302      	movs	r3, #2
 8001c48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SSN_GPIO_Port, &GPIO_InitStruct);
 8001c4a:	f107 030c 	add.w	r3, r7, #12
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4808      	ldr	r0, [pc, #32]	; (8001c74 <MX_GPIO_Init+0xa8>)
 8001c52:	f000 fac7 	bl	80021e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2100      	movs	r1, #0
 8001c5a:	2017      	movs	r0, #23
 8001c5c:	f000 fa8b 	bl	8002176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c60:	2017      	movs	r0, #23
 8001c62:	f000 faa4 	bl	80021ae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c66:	bf00      	nop
 8001c68:	3720      	adds	r7, #32
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40021000 	.word	0x40021000
 8001c74:	48000400 	.word	0x48000400

08001c78 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	80fb      	strh	r3, [r7, #6]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(GPIO_Pin);

	// Note: It takes about 1us after INTN

	if (GPIO_Pin == INTN_Pin) {
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c88:	d118      	bne.n	8001cbc <HAL_GPIO_EXTI_Callback+0x44>
		My_INTN_State = (HAL_GPIO_ReadPin(INTN_GPIO_Port, INTN_Pin) == GPIO_PIN_SET); /* low active */
 8001c8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c92:	f000 fc51 	bl	8002538 <HAL_GPIO_ReadPin>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	bf0c      	ite	eq
 8001c9c:	2301      	moveq	r3, #1
 8001c9e:	2300      	movne	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001ca6:	701a      	strb	r2, [r3, #0]
		if (My_INTN_State == 0) {
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d104      	bne.n	8001cbc <HAL_GPIO_EXTI_Callback+0x44>
			My_INTN_Counter += 1;
 8001cb2:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <HAL_GPIO_EXTI_Callback+0x50>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	4a03      	ldr	r2, [pc, #12]	; (8001cc8 <HAL_GPIO_EXTI_Callback+0x50>)
 8001cba:	6013      	str	r3, [r2, #0]
		}
	}

}
 8001cbc:	bf00      	nop
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000000 	.word	0x20000000
 8001cc8:	20000330 	.word	0x20000330

08001ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd0:	b672      	cpsid	i
}
 8001cd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cd4:	e7fe      	b.n	8001cd4 <Error_Handler+0x8>
	...

08001cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cde:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <HAL_MspInit+0x44>)
 8001ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce2:	4a0e      	ldr	r2, [pc, #56]	; (8001d1c <HAL_MspInit+0x44>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	6613      	str	r3, [r2, #96]	; 0x60
 8001cea:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <HAL_MspInit+0x44>)
 8001cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_MspInit+0x44>)
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfa:	4a08      	ldr	r2, [pc, #32]	; (8001d1c <HAL_MspInit+0x44>)
 8001cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d00:	6593      	str	r3, [r2, #88]	; 0x58
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_MspInit+0x44>)
 8001d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40021000 	.word	0x40021000

08001d20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	; 0x28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a17      	ldr	r2, [pc, #92]	; (8001d9c <HAL_SPI_MspInit+0x7c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d128      	bne.n	8001d94 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d42:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <HAL_SPI_MspInit+0x80>)
 8001d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d46:	4a16      	ldr	r2, [pc, #88]	; (8001da0 <HAL_SPI_MspInit+0x80>)
 8001d48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d4c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d4e:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <HAL_SPI_MspInit+0x80>)
 8001d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5a:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <HAL_SPI_MspInit+0x80>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5e:	4a10      	ldr	r2, [pc, #64]	; (8001da0 <HAL_SPI_MspInit+0x80>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <HAL_SPI_MspInit+0x80>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 8001d72:	23e0      	movs	r3, #224	; 0xe0
 8001d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d76:	2302      	movs	r3, #2
 8001d78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d82:	2305      	movs	r3, #5
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d86:	f107 0314 	add.w	r3, r7, #20
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d90:	f000 fa28 	bl	80021e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d94:	bf00      	nop
 8001d96:	3728      	adds	r7, #40	; 0x28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40013000 	.word	0x40013000
 8001da0:	40021000 	.word	0x40021000

08001da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001da8:	e7fe      	b.n	8001da8 <NMI_Handler+0x4>

08001daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dae:	e7fe      	b.n	8001dae <HardFault_Handler+0x4>

08001db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db4:	e7fe      	b.n	8001db4 <MemManage_Handler+0x4>

08001db6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dba:	e7fe      	b.n	8001dba <BusFault_Handler+0x4>

08001dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <UsageFault_Handler+0x4>

08001dc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001df0:	f000 f8a2 	bl	8001f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INTN_Pin);
 8001dfc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001e00:	f000 fbca 	bl	8002598 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e04:	bf00      	nop
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <SystemInit+0x20>)
 8001e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e12:	4a05      	ldr	r2, [pc, #20]	; (8001e28 <SystemInit+0x20>)
 8001e14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e30:	f7ff ffea 	bl	8001e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e34:	480c      	ldr	r0, [pc, #48]	; (8001e68 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e36:	490d      	ldr	r1, [pc, #52]	; (8001e6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e38:	4a0d      	ldr	r2, [pc, #52]	; (8001e70 <LoopForever+0xe>)
  movs r3, #0
 8001e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e3c:	e002      	b.n	8001e44 <LoopCopyDataInit>

08001e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e42:	3304      	adds	r3, #4

08001e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e48:	d3f9      	bcc.n	8001e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	; (8001e74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e4c:	4c0a      	ldr	r4, [pc, #40]	; (8001e78 <LoopForever+0x16>)
  movs r3, #0
 8001e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e50:	e001      	b.n	8001e56 <LoopFillZerobss>

08001e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e54:	3204      	adds	r2, #4

08001e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e58:	d3fb      	bcc.n	8001e52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e5a:	f002 f917 	bl	800408c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e5e:	f7ff fc4b 	bl	80016f8 <main>

08001e62 <LoopForever>:

LoopForever:
    b LoopForever
 8001e62:	e7fe      	b.n	8001e62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e64:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e6c:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8001e70:	08004134 	.word	0x08004134
  ldr r2, =_sbss
 8001e74:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8001e78:	20000348 	.word	0x20000348

08001e7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e7c:	e7fe      	b.n	8001e7c <ADC1_2_IRQHandler>
	...

08001e80 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e86:	2300      	movs	r3, #0
 8001e88:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <HAL_Init+0x3c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a0b      	ldr	r2, [pc, #44]	; (8001ebc <HAL_Init+0x3c>)
 8001e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e94:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e96:	2003      	movs	r0, #3
 8001e98:	f000 f962 	bl	8002160 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f000 f80f 	bl	8001ec0 <HAL_InitTick>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d002      	beq.n	8001eae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	71fb      	strb	r3, [r7, #7]
 8001eac:	e001      	b.n	8001eb2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001eae:	f7ff ff13 	bl	8001cd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40022000 	.word	0x40022000

08001ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ecc:	4b17      	ldr	r3, [pc, #92]	; (8001f2c <HAL_InitTick+0x6c>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d023      	beq.n	8001f1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ed4:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <HAL_InitTick+0x70>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <HAL_InitTick+0x6c>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	4619      	mov	r1, r3
 8001ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eea:	4618      	mov	r0, r3
 8001eec:	f000 f96d 	bl	80021ca <HAL_SYSTICK_Config>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10f      	bne.n	8001f16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b0f      	cmp	r3, #15
 8001efa:	d809      	bhi.n	8001f10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001efc:	2200      	movs	r2, #0
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	f04f 30ff 	mov.w	r0, #4294967295
 8001f04:	f000 f937 	bl	8002176 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f08:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <HAL_InitTick+0x74>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e007      	b.n	8001f20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	73fb      	strb	r3, [r7, #15]
 8001f14:	e004      	b.n	8001f20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	73fb      	strb	r3, [r7, #15]
 8001f1a:	e001      	b.n	8001f20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000184 	.word	0x20000184
 8001f30:	2000017c 	.word	0x2000017c
 8001f34:	20000180 	.word	0x20000180

08001f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_IncTick+0x20>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_IncTick+0x24>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4413      	add	r3, r2
 8001f48:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <HAL_IncTick+0x24>)
 8001f4a:	6013      	str	r3, [r2, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	20000184 	.word	0x20000184
 8001f5c:	20000344 	.word	0x20000344

08001f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return uwTick;
 8001f64:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <HAL_GetTick+0x14>)
 8001f66:	681b      	ldr	r3, [r3, #0]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20000344 	.word	0x20000344

08001f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f80:	f7ff ffee 	bl	8001f60 <HAL_GetTick>
 8001f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f90:	d005      	beq.n	8001f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f92:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <HAL_Delay+0x44>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f9e:	bf00      	nop
 8001fa0:	f7ff ffde 	bl	8001f60 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d8f7      	bhi.n	8001fa0 <HAL_Delay+0x28>
  {
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	bf00      	nop
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000184 	.word	0x20000184

08001fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fdc:	4013      	ands	r3, r2
 8001fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ff2:	4a04      	ldr	r2, [pc, #16]	; (8002004 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	60d3      	str	r3, [r2, #12]
}
 8001ff8:	bf00      	nop
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800200c:	4b04      	ldr	r3, [pc, #16]	; (8002020 <__NVIC_GetPriorityGrouping+0x18>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	0a1b      	lsrs	r3, r3, #8
 8002012:	f003 0307 	and.w	r3, r3, #7
}
 8002016:	4618      	mov	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800202e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002032:	2b00      	cmp	r3, #0
 8002034:	db0b      	blt.n	800204e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	f003 021f 	and.w	r2, r3, #31
 800203c:	4907      	ldr	r1, [pc, #28]	; (800205c <__NVIC_EnableIRQ+0x38>)
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	095b      	lsrs	r3, r3, #5
 8002044:	2001      	movs	r0, #1
 8002046:	fa00 f202 	lsl.w	r2, r0, r2
 800204a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	e000e100 	.word	0xe000e100

08002060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	6039      	str	r1, [r7, #0]
 800206a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002070:	2b00      	cmp	r3, #0
 8002072:	db0a      	blt.n	800208a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	b2da      	uxtb	r2, r3
 8002078:	490c      	ldr	r1, [pc, #48]	; (80020ac <__NVIC_SetPriority+0x4c>)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	0112      	lsls	r2, r2, #4
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	440b      	add	r3, r1
 8002084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002088:	e00a      	b.n	80020a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	b2da      	uxtb	r2, r3
 800208e:	4908      	ldr	r1, [pc, #32]	; (80020b0 <__NVIC_SetPriority+0x50>)
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	3b04      	subs	r3, #4
 8002098:	0112      	lsls	r2, r2, #4
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	440b      	add	r3, r1
 800209e:	761a      	strb	r2, [r3, #24]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000e100 	.word	0xe000e100
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b089      	sub	sp, #36	; 0x24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f1c3 0307 	rsb	r3, r3, #7
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	bf28      	it	cs
 80020d2:	2304      	movcs	r3, #4
 80020d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3304      	adds	r3, #4
 80020da:	2b06      	cmp	r3, #6
 80020dc:	d902      	bls.n	80020e4 <NVIC_EncodePriority+0x30>
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3b03      	subs	r3, #3
 80020e2:	e000      	b.n	80020e6 <NVIC_EncodePriority+0x32>
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43da      	mvns	r2, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	401a      	ands	r2, r3
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	fa01 f303 	lsl.w	r3, r1, r3
 8002106:	43d9      	mvns	r1, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	4313      	orrs	r3, r2
         );
}
 800210e:	4618      	mov	r0, r3
 8002110:	3724      	adds	r7, #36	; 0x24
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
	...

0800211c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3b01      	subs	r3, #1
 8002128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800212c:	d301      	bcc.n	8002132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800212e:	2301      	movs	r3, #1
 8002130:	e00f      	b.n	8002152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002132:	4a0a      	ldr	r2, [pc, #40]	; (800215c <SysTick_Config+0x40>)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3b01      	subs	r3, #1
 8002138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800213a:	210f      	movs	r1, #15
 800213c:	f04f 30ff 	mov.w	r0, #4294967295
 8002140:	f7ff ff8e 	bl	8002060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002144:	4b05      	ldr	r3, [pc, #20]	; (800215c <SysTick_Config+0x40>)
 8002146:	2200      	movs	r2, #0
 8002148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800214a:	4b04      	ldr	r3, [pc, #16]	; (800215c <SysTick_Config+0x40>)
 800214c:	2207      	movs	r2, #7
 800214e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	e000e010 	.word	0xe000e010

08002160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff ff29 	bl	8001fc0 <__NVIC_SetPriorityGrouping>
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b086      	sub	sp, #24
 800217a:	af00      	add	r7, sp, #0
 800217c:	4603      	mov	r3, r0
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	607a      	str	r2, [r7, #4]
 8002182:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002188:	f7ff ff3e 	bl	8002008 <__NVIC_GetPriorityGrouping>
 800218c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	68b9      	ldr	r1, [r7, #8]
 8002192:	6978      	ldr	r0, [r7, #20]
 8002194:	f7ff ff8e 	bl	80020b4 <NVIC_EncodePriority>
 8002198:	4602      	mov	r2, r0
 800219a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800219e:	4611      	mov	r1, r2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff ff5d 	bl	8002060 <__NVIC_SetPriority>
}
 80021a6:	bf00      	nop
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b082      	sub	sp, #8
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	4603      	mov	r3, r0
 80021b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff ff31 	bl	8002024 <__NVIC_EnableIRQ>
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff ffa2 	bl	800211c <SysTick_Config>
 80021d8:	4603      	mov	r3, r0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b087      	sub	sp, #28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021f2:	e17f      	b.n	80024f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	2101      	movs	r1, #1
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002200:	4013      	ands	r3, r2
 8002202:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 8171 	beq.w	80024ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	2b01      	cmp	r3, #1
 8002216:	d005      	beq.n	8002224 <HAL_GPIO_Init+0x40>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d130      	bne.n	8002286 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	2203      	movs	r2, #3
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	4013      	ands	r3, r2
 800223a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4313      	orrs	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800225a:	2201      	movs	r2, #1
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43db      	mvns	r3, r3
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4013      	ands	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	091b      	lsrs	r3, r3, #4
 8002270:	f003 0201 	and.w	r2, r3, #1
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	2b03      	cmp	r3, #3
 8002290:	d118      	bne.n	80022c4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002296:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002298:	2201      	movs	r2, #1
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4013      	ands	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	08db      	lsrs	r3, r3, #3
 80022ae:	f003 0201 	and.w	r2, r3, #1
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	2b03      	cmp	r3, #3
 80022ce:	d017      	beq.n	8002300 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	2203      	movs	r2, #3
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4013      	ands	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d123      	bne.n	8002354 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	08da      	lsrs	r2, r3, #3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3208      	adds	r2, #8
 8002314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002318:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	220f      	movs	r2, #15
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	691a      	ldr	r2, [r3, #16]
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4313      	orrs	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	08da      	lsrs	r2, r3, #3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3208      	adds	r2, #8
 800234e:	6939      	ldr	r1, [r7, #16]
 8002350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	2203      	movs	r2, #3
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4013      	ands	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 0203 	and.w	r2, r3, #3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 80ac 	beq.w	80024ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002396:	4b5f      	ldr	r3, [pc, #380]	; (8002514 <HAL_GPIO_Init+0x330>)
 8002398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800239a:	4a5e      	ldr	r2, [pc, #376]	; (8002514 <HAL_GPIO_Init+0x330>)
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	6613      	str	r3, [r2, #96]	; 0x60
 80023a2:	4b5c      	ldr	r3, [pc, #368]	; (8002514 <HAL_GPIO_Init+0x330>)
 80023a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	60bb      	str	r3, [r7, #8]
 80023ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023ae:	4a5a      	ldr	r2, [pc, #360]	; (8002518 <HAL_GPIO_Init+0x334>)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	089b      	lsrs	r3, r3, #2
 80023b4:	3302      	adds	r3, #2
 80023b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	220f      	movs	r2, #15
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4013      	ands	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023d8:	d025      	beq.n	8002426 <HAL_GPIO_Init+0x242>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a4f      	ldr	r2, [pc, #316]	; (800251c <HAL_GPIO_Init+0x338>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d01f      	beq.n	8002422 <HAL_GPIO_Init+0x23e>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a4e      	ldr	r2, [pc, #312]	; (8002520 <HAL_GPIO_Init+0x33c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d019      	beq.n	800241e <HAL_GPIO_Init+0x23a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a4d      	ldr	r2, [pc, #308]	; (8002524 <HAL_GPIO_Init+0x340>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d013      	beq.n	800241a <HAL_GPIO_Init+0x236>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a4c      	ldr	r2, [pc, #304]	; (8002528 <HAL_GPIO_Init+0x344>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d00d      	beq.n	8002416 <HAL_GPIO_Init+0x232>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a4b      	ldr	r2, [pc, #300]	; (800252c <HAL_GPIO_Init+0x348>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d007      	beq.n	8002412 <HAL_GPIO_Init+0x22e>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a4a      	ldr	r2, [pc, #296]	; (8002530 <HAL_GPIO_Init+0x34c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d101      	bne.n	800240e <HAL_GPIO_Init+0x22a>
 800240a:	2306      	movs	r3, #6
 800240c:	e00c      	b.n	8002428 <HAL_GPIO_Init+0x244>
 800240e:	2307      	movs	r3, #7
 8002410:	e00a      	b.n	8002428 <HAL_GPIO_Init+0x244>
 8002412:	2305      	movs	r3, #5
 8002414:	e008      	b.n	8002428 <HAL_GPIO_Init+0x244>
 8002416:	2304      	movs	r3, #4
 8002418:	e006      	b.n	8002428 <HAL_GPIO_Init+0x244>
 800241a:	2303      	movs	r3, #3
 800241c:	e004      	b.n	8002428 <HAL_GPIO_Init+0x244>
 800241e:	2302      	movs	r3, #2
 8002420:	e002      	b.n	8002428 <HAL_GPIO_Init+0x244>
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <HAL_GPIO_Init+0x244>
 8002426:	2300      	movs	r3, #0
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	f002 0203 	and.w	r2, r2, #3
 800242e:	0092      	lsls	r2, r2, #2
 8002430:	4093      	lsls	r3, r2
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002438:	4937      	ldr	r1, [pc, #220]	; (8002518 <HAL_GPIO_Init+0x334>)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	089b      	lsrs	r3, r3, #2
 800243e:	3302      	adds	r3, #2
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002446:	4b3b      	ldr	r3, [pc, #236]	; (8002534 <HAL_GPIO_Init+0x350>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	43db      	mvns	r3, r3
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4013      	ands	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4313      	orrs	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800246a:	4a32      	ldr	r2, [pc, #200]	; (8002534 <HAL_GPIO_Init+0x350>)
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002470:	4b30      	ldr	r3, [pc, #192]	; (8002534 <HAL_GPIO_Init+0x350>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	43db      	mvns	r3, r3
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4013      	ands	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	4313      	orrs	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002494:	4a27      	ldr	r2, [pc, #156]	; (8002534 <HAL_GPIO_Init+0x350>)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800249a:	4b26      	ldr	r3, [pc, #152]	; (8002534 <HAL_GPIO_Init+0x350>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	43db      	mvns	r3, r3
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4013      	ands	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024be:	4a1d      	ldr	r2, [pc, #116]	; (8002534 <HAL_GPIO_Init+0x350>)
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80024c4:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <HAL_GPIO_Init+0x350>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	43db      	mvns	r3, r3
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4013      	ands	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024e8:	4a12      	ldr	r2, [pc, #72]	; (8002534 <HAL_GPIO_Init+0x350>)
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	3301      	adds	r3, #1
 80024f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	fa22 f303 	lsr.w	r3, r2, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f47f ae78 	bne.w	80021f4 <HAL_GPIO_Init+0x10>
  }
}
 8002504:	bf00      	nop
 8002506:	bf00      	nop
 8002508:	371c      	adds	r7, #28
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000
 8002518:	40010000 	.word	0x40010000
 800251c:	48000400 	.word	0x48000400
 8002520:	48000800 	.word	0x48000800
 8002524:	48000c00 	.word	0x48000c00
 8002528:	48001000 	.word	0x48001000
 800252c:	48001400 	.word	0x48001400
 8002530:	48001800 	.word	0x48001800
 8002534:	40010400 	.word	0x40010400

08002538 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	887b      	ldrh	r3, [r7, #2]
 800254a:	4013      	ands	r3, r2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d002      	beq.n	8002556 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002550:	2301      	movs	r3, #1
 8002552:	73fb      	strb	r3, [r7, #15]
 8002554:	e001      	b.n	800255a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002556:	2300      	movs	r3, #0
 8002558:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800255a:	7bfb      	ldrb	r3, [r7, #15]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	807b      	strh	r3, [r7, #2]
 8002574:	4613      	mov	r3, r2
 8002576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002578:	787b      	ldrb	r3, [r7, #1]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800257e:	887a      	ldrh	r2, [r7, #2]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002584:	e002      	b.n	800258c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002586:	887a      	ldrh	r2, [r7, #2]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025a2:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	88fb      	ldrh	r3, [r7, #6]
 80025a8:	4013      	ands	r3, r2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d006      	beq.n	80025bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025ae:	4a05      	ldr	r2, [pc, #20]	; (80025c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025b0:	88fb      	ldrh	r3, [r7, #6]
 80025b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025b4:	88fb      	ldrh	r3, [r7, #6]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fb5e 	bl	8001c78 <HAL_GPIO_EXTI_Callback>
  }
}
 80025bc:	bf00      	nop
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40010400 	.word	0x40010400

080025c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40007000 	.word	0x40007000

080025e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025f2:	d130      	bne.n	8002656 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80025f4:	4b23      	ldr	r3, [pc, #140]	; (8002684 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002600:	d038      	beq.n	8002674 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002602:	4b20      	ldr	r3, [pc, #128]	; (8002684 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800260a:	4a1e      	ldr	r2, [pc, #120]	; (8002684 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800260c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002610:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002612:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2232      	movs	r2, #50	; 0x32
 8002618:	fb02 f303 	mul.w	r3, r2, r3
 800261c:	4a1b      	ldr	r2, [pc, #108]	; (800268c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	0c9b      	lsrs	r3, r3, #18
 8002624:	3301      	adds	r3, #1
 8002626:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002628:	e002      	b.n	8002630 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	3b01      	subs	r3, #1
 800262e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002630:	4b14      	ldr	r3, [pc, #80]	; (8002684 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800263c:	d102      	bne.n	8002644 <HAL_PWREx_ControlVoltageScaling+0x60>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1f2      	bne.n	800262a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002644:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800264c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002650:	d110      	bne.n	8002674 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e00f      	b.n	8002676 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002656:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800265e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002662:	d007      	beq.n	8002674 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002664:	4b07      	ldr	r3, [pc, #28]	; (8002684 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800266c:	4a05      	ldr	r2, [pc, #20]	; (8002684 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800266e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002672:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40007000 	.word	0x40007000
 8002688:	2000017c 	.word	0x2000017c
 800268c:	431bde83 	.word	0x431bde83

08002690 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e3ca      	b.n	8002e38 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026a2:	4b97      	ldr	r3, [pc, #604]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 030c 	and.w	r3, r3, #12
 80026aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026ac:	4b94      	ldr	r3, [pc, #592]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f003 0303 	and.w	r3, r3, #3
 80026b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0310 	and.w	r3, r3, #16
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 80e4 	beq.w	800288c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d007      	beq.n	80026da <HAL_RCC_OscConfig+0x4a>
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	2b0c      	cmp	r3, #12
 80026ce:	f040 808b 	bne.w	80027e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	f040 8087 	bne.w	80027e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026da:	4b89      	ldr	r3, [pc, #548]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d005      	beq.n	80026f2 <HAL_RCC_OscConfig+0x62>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e3a2      	b.n	8002e38 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a1a      	ldr	r2, [r3, #32]
 80026f6:	4b82      	ldr	r3, [pc, #520]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d004      	beq.n	800270c <HAL_RCC_OscConfig+0x7c>
 8002702:	4b7f      	ldr	r3, [pc, #508]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800270a:	e005      	b.n	8002718 <HAL_RCC_OscConfig+0x88>
 800270c:	4b7c      	ldr	r3, [pc, #496]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 800270e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002712:	091b      	lsrs	r3, r3, #4
 8002714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002718:	4293      	cmp	r3, r2
 800271a:	d223      	bcs.n	8002764 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	4618      	mov	r0, r3
 8002722:	f000 fd1d 	bl	8003160 <RCC_SetFlashLatencyFromMSIRange>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e383      	b.n	8002e38 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002730:	4b73      	ldr	r3, [pc, #460]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a72      	ldr	r2, [pc, #456]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 8002736:	f043 0308 	orr.w	r3, r3, #8
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	4b70      	ldr	r3, [pc, #448]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	496d      	ldr	r1, [pc, #436]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 800274a:	4313      	orrs	r3, r2
 800274c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800274e:	4b6c      	ldr	r3, [pc, #432]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	021b      	lsls	r3, r3, #8
 800275c:	4968      	ldr	r1, [pc, #416]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 800275e:	4313      	orrs	r3, r2
 8002760:	604b      	str	r3, [r1, #4]
 8002762:	e025      	b.n	80027b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002764:	4b66      	ldr	r3, [pc, #408]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a65      	ldr	r2, [pc, #404]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 800276a:	f043 0308 	orr.w	r3, r3, #8
 800276e:	6013      	str	r3, [r2, #0]
 8002770:	4b63      	ldr	r3, [pc, #396]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	4960      	ldr	r1, [pc, #384]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 800277e:	4313      	orrs	r3, r2
 8002780:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002782:	4b5f      	ldr	r3, [pc, #380]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	021b      	lsls	r3, r3, #8
 8002790:	495b      	ldr	r1, [pc, #364]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 8002792:	4313      	orrs	r3, r2
 8002794:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d109      	bne.n	80027b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 fcdd 	bl	8003160 <RCC_SetFlashLatencyFromMSIRange>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e343      	b.n	8002e38 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027b0:	f000 fc4a 	bl	8003048 <HAL_RCC_GetSysClockFreq>
 80027b4:	4602      	mov	r2, r0
 80027b6:	4b52      	ldr	r3, [pc, #328]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	091b      	lsrs	r3, r3, #4
 80027bc:	f003 030f 	and.w	r3, r3, #15
 80027c0:	4950      	ldr	r1, [pc, #320]	; (8002904 <HAL_RCC_OscConfig+0x274>)
 80027c2:	5ccb      	ldrb	r3, [r1, r3]
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	fa22 f303 	lsr.w	r3, r2, r3
 80027cc:	4a4e      	ldr	r2, [pc, #312]	; (8002908 <HAL_RCC_OscConfig+0x278>)
 80027ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027d0:	4b4e      	ldr	r3, [pc, #312]	; (800290c <HAL_RCC_OscConfig+0x27c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff fb73 	bl	8001ec0 <HAL_InitTick>
 80027da:	4603      	mov	r3, r0
 80027dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80027de:	7bfb      	ldrb	r3, [r7, #15]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d052      	beq.n	800288a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	e327      	b.n	8002e38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d032      	beq.n	8002856 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027f0:	4b43      	ldr	r3, [pc, #268]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a42      	ldr	r2, [pc, #264]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027fc:	f7ff fbb0 	bl	8001f60 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002804:	f7ff fbac 	bl	8001f60 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e310      	b.n	8002e38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002816:	4b3a      	ldr	r3, [pc, #232]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002822:	4b37      	ldr	r3, [pc, #220]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a36      	ldr	r2, [pc, #216]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 8002828:	f043 0308 	orr.w	r3, r3, #8
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	4b34      	ldr	r3, [pc, #208]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	4931      	ldr	r1, [pc, #196]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 800283c:	4313      	orrs	r3, r2
 800283e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002840:	4b2f      	ldr	r3, [pc, #188]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	021b      	lsls	r3, r3, #8
 800284e:	492c      	ldr	r1, [pc, #176]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
 8002854:	e01a      	b.n	800288c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002856:	4b2a      	ldr	r3, [pc, #168]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a29      	ldr	r2, [pc, #164]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 800285c:	f023 0301 	bic.w	r3, r3, #1
 8002860:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002862:	f7ff fb7d 	bl	8001f60 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800286a:	f7ff fb79 	bl	8001f60 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e2dd      	b.n	8002e38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800287c:	4b20      	ldr	r3, [pc, #128]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f0      	bne.n	800286a <HAL_RCC_OscConfig+0x1da>
 8002888:	e000      	b.n	800288c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800288a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	d074      	beq.n	8002982 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	2b08      	cmp	r3, #8
 800289c:	d005      	beq.n	80028aa <HAL_RCC_OscConfig+0x21a>
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	2b0c      	cmp	r3, #12
 80028a2:	d10e      	bne.n	80028c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d10b      	bne.n	80028c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028aa:	4b15      	ldr	r3, [pc, #84]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d064      	beq.n	8002980 <HAL_RCC_OscConfig+0x2f0>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d160      	bne.n	8002980 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e2ba      	b.n	8002e38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ca:	d106      	bne.n	80028da <HAL_RCC_OscConfig+0x24a>
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a0b      	ldr	r2, [pc, #44]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 80028d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d6:	6013      	str	r3, [r2, #0]
 80028d8:	e026      	b.n	8002928 <HAL_RCC_OscConfig+0x298>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028e2:	d115      	bne.n	8002910 <HAL_RCC_OscConfig+0x280>
 80028e4:	4b06      	ldr	r3, [pc, #24]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a05      	ldr	r2, [pc, #20]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 80028ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	4b03      	ldr	r3, [pc, #12]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a02      	ldr	r2, [pc, #8]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 80028f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	e014      	b.n	8002928 <HAL_RCC_OscConfig+0x298>
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000
 8002904:	080040ec 	.word	0x080040ec
 8002908:	2000017c 	.word	0x2000017c
 800290c:	20000180 	.word	0x20000180
 8002910:	4ba0      	ldr	r3, [pc, #640]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a9f      	ldr	r2, [pc, #636]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	4b9d      	ldr	r3, [pc, #628]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a9c      	ldr	r2, [pc, #624]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002926:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d013      	beq.n	8002958 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002930:	f7ff fb16 	bl	8001f60 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002938:	f7ff fb12 	bl	8001f60 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b64      	cmp	r3, #100	; 0x64
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e276      	b.n	8002e38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800294a:	4b92      	ldr	r3, [pc, #584]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0f0      	beq.n	8002938 <HAL_RCC_OscConfig+0x2a8>
 8002956:	e014      	b.n	8002982 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002958:	f7ff fb02 	bl	8001f60 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002960:	f7ff fafe 	bl	8001f60 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b64      	cmp	r3, #100	; 0x64
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e262      	b.n	8002e38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002972:	4b88      	ldr	r3, [pc, #544]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x2d0>
 800297e:	e000      	b.n	8002982 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d060      	beq.n	8002a50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	2b04      	cmp	r3, #4
 8002992:	d005      	beq.n	80029a0 <HAL_RCC_OscConfig+0x310>
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	2b0c      	cmp	r3, #12
 8002998:	d119      	bne.n	80029ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2b02      	cmp	r3, #2
 800299e:	d116      	bne.n	80029ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029a0:	4b7c      	ldr	r3, [pc, #496]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <HAL_RCC_OscConfig+0x328>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e23f      	b.n	8002e38 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b8:	4b76      	ldr	r3, [pc, #472]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	061b      	lsls	r3, r3, #24
 80029c6:	4973      	ldr	r1, [pc, #460]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029cc:	e040      	b.n	8002a50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d023      	beq.n	8002a1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029d6:	4b6f      	ldr	r3, [pc, #444]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a6e      	ldr	r2, [pc, #440]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 80029dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e2:	f7ff fabd 	bl	8001f60 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ea:	f7ff fab9 	bl	8001f60 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e21d      	b.n	8002e38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029fc:	4b65      	ldr	r3, [pc, #404]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0f0      	beq.n	80029ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a08:	4b62      	ldr	r3, [pc, #392]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	061b      	lsls	r3, r3, #24
 8002a16:	495f      	ldr	r1, [pc, #380]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	604b      	str	r3, [r1, #4]
 8002a1c:	e018      	b.n	8002a50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a1e:	4b5d      	ldr	r3, [pc, #372]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a5c      	ldr	r2, [pc, #368]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2a:	f7ff fa99 	bl	8001f60 <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a32:	f7ff fa95 	bl	8001f60 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e1f9      	b.n	8002e38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a44:	4b53      	ldr	r3, [pc, #332]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1f0      	bne.n	8002a32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d03c      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d01c      	beq.n	8002a9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a64:	4b4b      	ldr	r3, [pc, #300]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a6a:	4a4a      	ldr	r2, [pc, #296]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a74:	f7ff fa74 	bl	8001f60 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a7c:	f7ff fa70 	bl	8001f60 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e1d4      	b.n	8002e38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a8e:	4b41      	ldr	r3, [pc, #260]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0ef      	beq.n	8002a7c <HAL_RCC_OscConfig+0x3ec>
 8002a9c:	e01b      	b.n	8002ad6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a9e:	4b3d      	ldr	r3, [pc, #244]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aa4:	4a3b      	ldr	r2, [pc, #236]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002aa6:	f023 0301 	bic.w	r3, r3, #1
 8002aaa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aae:	f7ff fa57 	bl	8001f60 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ab6:	f7ff fa53 	bl	8001f60 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e1b7      	b.n	8002e38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ac8:	4b32      	ldr	r3, [pc, #200]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1ef      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0304 	and.w	r3, r3, #4
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 80a6 	beq.w	8002c30 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ae8:	4b2a      	ldr	r3, [pc, #168]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10d      	bne.n	8002b10 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af4:	4b27      	ldr	r3, [pc, #156]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af8:	4a26      	ldr	r2, [pc, #152]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002afe:	6593      	str	r3, [r2, #88]	; 0x58
 8002b00:	4b24      	ldr	r3, [pc, #144]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b08:	60bb      	str	r3, [r7, #8]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b10:	4b21      	ldr	r3, [pc, #132]	; (8002b98 <HAL_RCC_OscConfig+0x508>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d118      	bne.n	8002b4e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b1c:	4b1e      	ldr	r3, [pc, #120]	; (8002b98 <HAL_RCC_OscConfig+0x508>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a1d      	ldr	r2, [pc, #116]	; (8002b98 <HAL_RCC_OscConfig+0x508>)
 8002b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b28:	f7ff fa1a 	bl	8001f60 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b30:	f7ff fa16 	bl	8001f60 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e17a      	b.n	8002e38 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b42:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <HAL_RCC_OscConfig+0x508>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0f0      	beq.n	8002b30 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d108      	bne.n	8002b68 <HAL_RCC_OscConfig+0x4d8>
 8002b56:	4b0f      	ldr	r3, [pc, #60]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5c:	4a0d      	ldr	r2, [pc, #52]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b66:	e029      	b.n	8002bbc <HAL_RCC_OscConfig+0x52c>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2b05      	cmp	r3, #5
 8002b6e:	d115      	bne.n	8002b9c <HAL_RCC_OscConfig+0x50c>
 8002b70:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b76:	4a07      	ldr	r2, [pc, #28]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002b78:	f043 0304 	orr.w	r3, r3, #4
 8002b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b80:	4b04      	ldr	r3, [pc, #16]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b86:	4a03      	ldr	r2, [pc, #12]	; (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002b88:	f043 0301 	orr.w	r3, r3, #1
 8002b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b90:	e014      	b.n	8002bbc <HAL_RCC_OscConfig+0x52c>
 8002b92:	bf00      	nop
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40007000 	.word	0x40007000
 8002b9c:	4b9c      	ldr	r3, [pc, #624]	; (8002e10 <HAL_RCC_OscConfig+0x780>)
 8002b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba2:	4a9b      	ldr	r2, [pc, #620]	; (8002e10 <HAL_RCC_OscConfig+0x780>)
 8002ba4:	f023 0301 	bic.w	r3, r3, #1
 8002ba8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bac:	4b98      	ldr	r3, [pc, #608]	; (8002e10 <HAL_RCC_OscConfig+0x780>)
 8002bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb2:	4a97      	ldr	r2, [pc, #604]	; (8002e10 <HAL_RCC_OscConfig+0x780>)
 8002bb4:	f023 0304 	bic.w	r3, r3, #4
 8002bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d016      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc4:	f7ff f9cc 	bl	8001f60 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bca:	e00a      	b.n	8002be2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bcc:	f7ff f9c8 	bl	8001f60 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e12a      	b.n	8002e38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002be2:	4b8b      	ldr	r3, [pc, #556]	; (8002e10 <HAL_RCC_OscConfig+0x780>)
 8002be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0ed      	beq.n	8002bcc <HAL_RCC_OscConfig+0x53c>
 8002bf0:	e015      	b.n	8002c1e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf2:	f7ff f9b5 	bl	8001f60 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bf8:	e00a      	b.n	8002c10 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bfa:	f7ff f9b1 	bl	8001f60 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e113      	b.n	8002e38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c10:	4b7f      	ldr	r3, [pc, #508]	; (8002e10 <HAL_RCC_OscConfig+0x780>)
 8002c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1ed      	bne.n	8002bfa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c1e:	7ffb      	ldrb	r3, [r7, #31]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d105      	bne.n	8002c30 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c24:	4b7a      	ldr	r3, [pc, #488]	; (8002e10 <HAL_RCC_OscConfig+0x780>)
 8002c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c28:	4a79      	ldr	r2, [pc, #484]	; (8002e10 <HAL_RCC_OscConfig+0x780>)
 8002c2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c2e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 80fe 	beq.w	8002e36 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	f040 80d0 	bne.w	8002de4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c44:	4b72      	ldr	r3, [pc, #456]	; (8002e10 <HAL_RCC_OscConfig+0x780>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f003 0203 	and.w	r2, r3, #3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d130      	bne.n	8002cba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	3b01      	subs	r3, #1
 8002c64:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d127      	bne.n	8002cba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c74:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d11f      	bne.n	8002cba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c84:	2a07      	cmp	r2, #7
 8002c86:	bf14      	ite	ne
 8002c88:	2201      	movne	r2, #1
 8002c8a:	2200      	moveq	r2, #0
 8002c8c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d113      	bne.n	8002cba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9c:	085b      	lsrs	r3, r3, #1
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d109      	bne.n	8002cba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	085b      	lsrs	r3, r3, #1
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d06e      	beq.n	8002d98 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	2b0c      	cmp	r3, #12
 8002cbe:	d069      	beq.n	8002d94 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002cc0:	4b53      	ldr	r3, [pc, #332]	; (8002e10 <HAL_RCC_OscConfig+0x780>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d105      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ccc:	4b50      	ldr	r3, [pc, #320]	; (8002e10 <HAL_RCC_OscConfig+0x780>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e0ad      	b.n	8002e38 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002cdc:	4b4c      	ldr	r3, [pc, #304]	; (8002e10 <HAL_RCC_OscConfig+0x780>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a4b      	ldr	r2, [pc, #300]	; (8002e10 <HAL_RCC_OscConfig+0x780>)
 8002ce2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ce6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ce8:	f7ff f93a 	bl	8001f60 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf0:	f7ff f936 	bl	8001f60 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e09a      	b.n	8002e38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d02:	4b43      	ldr	r3, [pc, #268]	; (8002e10 <HAL_RCC_OscConfig+0x780>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f0      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d0e:	4b40      	ldr	r3, [pc, #256]	; (8002e10 <HAL_RCC_OscConfig+0x780>)
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	4b40      	ldr	r3, [pc, #256]	; (8002e14 <HAL_RCC_OscConfig+0x784>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d1e:	3a01      	subs	r2, #1
 8002d20:	0112      	lsls	r2, r2, #4
 8002d22:	4311      	orrs	r1, r2
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d28:	0212      	lsls	r2, r2, #8
 8002d2a:	4311      	orrs	r1, r2
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d30:	0852      	lsrs	r2, r2, #1
 8002d32:	3a01      	subs	r2, #1
 8002d34:	0552      	lsls	r2, r2, #21
 8002d36:	4311      	orrs	r1, r2
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d3c:	0852      	lsrs	r2, r2, #1
 8002d3e:	3a01      	subs	r2, #1
 8002d40:	0652      	lsls	r2, r2, #25
 8002d42:	4311      	orrs	r1, r2
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d48:	0912      	lsrs	r2, r2, #4
 8002d4a:	0452      	lsls	r2, r2, #17
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	4930      	ldr	r1, [pc, #192]	; (8002e10 <HAL_RCC_OscConfig+0x780>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d54:	4b2e      	ldr	r3, [pc, #184]	; (8002e10 <HAL_RCC_OscConfig+0x780>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a2d      	ldr	r2, [pc, #180]	; (8002e10 <HAL_RCC_OscConfig+0x780>)
 8002d5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d60:	4b2b      	ldr	r3, [pc, #172]	; (8002e10 <HAL_RCC_OscConfig+0x780>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	4a2a      	ldr	r2, [pc, #168]	; (8002e10 <HAL_RCC_OscConfig+0x780>)
 8002d66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d6c:	f7ff f8f8 	bl	8001f60 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d74:	f7ff f8f4 	bl	8001f60 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e058      	b.n	8002e38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d86:	4b22      	ldr	r3, [pc, #136]	; (8002e10 <HAL_RCC_OscConfig+0x780>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0f0      	beq.n	8002d74 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d92:	e050      	b.n	8002e36 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e04f      	b.n	8002e38 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d98:	4b1d      	ldr	r3, [pc, #116]	; (8002e10 <HAL_RCC_OscConfig+0x780>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d148      	bne.n	8002e36 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002da4:	4b1a      	ldr	r3, [pc, #104]	; (8002e10 <HAL_RCC_OscConfig+0x780>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a19      	ldr	r2, [pc, #100]	; (8002e10 <HAL_RCC_OscConfig+0x780>)
 8002daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002db0:	4b17      	ldr	r3, [pc, #92]	; (8002e10 <HAL_RCC_OscConfig+0x780>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	4a16      	ldr	r2, [pc, #88]	; (8002e10 <HAL_RCC_OscConfig+0x780>)
 8002db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dbc:	f7ff f8d0 	bl	8001f60 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc4:	f7ff f8cc 	bl	8001f60 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e030      	b.n	8002e38 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dd6:	4b0e      	ldr	r3, [pc, #56]	; (8002e10 <HAL_RCC_OscConfig+0x780>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x734>
 8002de2:	e028      	b.n	8002e36 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	2b0c      	cmp	r3, #12
 8002de8:	d023      	beq.n	8002e32 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dea:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <HAL_RCC_OscConfig+0x780>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a08      	ldr	r2, [pc, #32]	; (8002e10 <HAL_RCC_OscConfig+0x780>)
 8002df0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002df4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df6:	f7ff f8b3 	bl	8001f60 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dfc:	e00c      	b.n	8002e18 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dfe:	f7ff f8af 	bl	8001f60 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d905      	bls.n	8002e18 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e013      	b.n	8002e38 <HAL_RCC_OscConfig+0x7a8>
 8002e10:	40021000 	.word	0x40021000
 8002e14:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e18:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <HAL_RCC_OscConfig+0x7b0>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1ec      	bne.n	8002dfe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e24:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <HAL_RCC_OscConfig+0x7b0>)
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	4905      	ldr	r1, [pc, #20]	; (8002e40 <HAL_RCC_OscConfig+0x7b0>)
 8002e2a:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <HAL_RCC_OscConfig+0x7b4>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	60cb      	str	r3, [r1, #12]
 8002e30:	e001      	b.n	8002e36 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e000      	b.n	8002e38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3720      	adds	r7, #32
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40021000 	.word	0x40021000
 8002e44:	feeefffc 	.word	0xfeeefffc

08002e48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e0e7      	b.n	800302c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e5c:	4b75      	ldr	r3, [pc, #468]	; (8003034 <HAL_RCC_ClockConfig+0x1ec>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d910      	bls.n	8002e8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6a:	4b72      	ldr	r3, [pc, #456]	; (8003034 <HAL_RCC_ClockConfig+0x1ec>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f023 0207 	bic.w	r2, r3, #7
 8002e72:	4970      	ldr	r1, [pc, #448]	; (8003034 <HAL_RCC_ClockConfig+0x1ec>)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7a:	4b6e      	ldr	r3, [pc, #440]	; (8003034 <HAL_RCC_ClockConfig+0x1ec>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d001      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0cf      	b.n	800302c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d010      	beq.n	8002eba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	4b66      	ldr	r3, [pc, #408]	; (8003038 <HAL_RCC_ClockConfig+0x1f0>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d908      	bls.n	8002eba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea8:	4b63      	ldr	r3, [pc, #396]	; (8003038 <HAL_RCC_ClockConfig+0x1f0>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	4960      	ldr	r1, [pc, #384]	; (8003038 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d04c      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	d107      	bne.n	8002ede <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ece:	4b5a      	ldr	r3, [pc, #360]	; (8003038 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d121      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e0a6      	b.n	800302c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d107      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ee6:	4b54      	ldr	r3, [pc, #336]	; (8003038 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d115      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e09a      	b.n	800302c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d107      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002efe:	4b4e      	ldr	r3, [pc, #312]	; (8003038 <HAL_RCC_ClockConfig+0x1f0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d109      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e08e      	b.n	800302c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f0e:	4b4a      	ldr	r3, [pc, #296]	; (8003038 <HAL_RCC_ClockConfig+0x1f0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e086      	b.n	800302c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f1e:	4b46      	ldr	r3, [pc, #280]	; (8003038 <HAL_RCC_ClockConfig+0x1f0>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f023 0203 	bic.w	r2, r3, #3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	4943      	ldr	r1, [pc, #268]	; (8003038 <HAL_RCC_ClockConfig+0x1f0>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f30:	f7ff f816 	bl	8001f60 <HAL_GetTick>
 8002f34:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f36:	e00a      	b.n	8002f4e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f38:	f7ff f812 	bl	8001f60 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e06e      	b.n	800302c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4e:	4b3a      	ldr	r3, [pc, #232]	; (8003038 <HAL_RCC_ClockConfig+0x1f0>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 020c 	and.w	r2, r3, #12
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d1eb      	bne.n	8002f38 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d010      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	4b31      	ldr	r3, [pc, #196]	; (8003038 <HAL_RCC_ClockConfig+0x1f0>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d208      	bcs.n	8002f8e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f7c:	4b2e      	ldr	r3, [pc, #184]	; (8003038 <HAL_RCC_ClockConfig+0x1f0>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	492b      	ldr	r1, [pc, #172]	; (8003038 <HAL_RCC_ClockConfig+0x1f0>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f8e:	4b29      	ldr	r3, [pc, #164]	; (8003034 <HAL_RCC_ClockConfig+0x1ec>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d210      	bcs.n	8002fbe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9c:	4b25      	ldr	r3, [pc, #148]	; (8003034 <HAL_RCC_ClockConfig+0x1ec>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f023 0207 	bic.w	r2, r3, #7
 8002fa4:	4923      	ldr	r1, [pc, #140]	; (8003034 <HAL_RCC_ClockConfig+0x1ec>)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fac:	4b21      	ldr	r3, [pc, #132]	; (8003034 <HAL_RCC_ClockConfig+0x1ec>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d001      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e036      	b.n	800302c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0304 	and.w	r3, r3, #4
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d008      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fca:	4b1b      	ldr	r3, [pc, #108]	; (8003038 <HAL_RCC_ClockConfig+0x1f0>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	4918      	ldr	r1, [pc, #96]	; (8003038 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d009      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fe8:	4b13      	ldr	r3, [pc, #76]	; (8003038 <HAL_RCC_ClockConfig+0x1f0>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	4910      	ldr	r1, [pc, #64]	; (8003038 <HAL_RCC_ClockConfig+0x1f0>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ffc:	f000 f824 	bl	8003048 <HAL_RCC_GetSysClockFreq>
 8003000:	4602      	mov	r2, r0
 8003002:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <HAL_RCC_ClockConfig+0x1f0>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	091b      	lsrs	r3, r3, #4
 8003008:	f003 030f 	and.w	r3, r3, #15
 800300c:	490b      	ldr	r1, [pc, #44]	; (800303c <HAL_RCC_ClockConfig+0x1f4>)
 800300e:	5ccb      	ldrb	r3, [r1, r3]
 8003010:	f003 031f 	and.w	r3, r3, #31
 8003014:	fa22 f303 	lsr.w	r3, r2, r3
 8003018:	4a09      	ldr	r2, [pc, #36]	; (8003040 <HAL_RCC_ClockConfig+0x1f8>)
 800301a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800301c:	4b09      	ldr	r3, [pc, #36]	; (8003044 <HAL_RCC_ClockConfig+0x1fc>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f7fe ff4d 	bl	8001ec0 <HAL_InitTick>
 8003026:	4603      	mov	r3, r0
 8003028:	72fb      	strb	r3, [r7, #11]

  return status;
 800302a:	7afb      	ldrb	r3, [r7, #11]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40022000 	.word	0x40022000
 8003038:	40021000 	.word	0x40021000
 800303c:	080040ec 	.word	0x080040ec
 8003040:	2000017c 	.word	0x2000017c
 8003044:	20000180 	.word	0x20000180

08003048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003048:	b480      	push	{r7}
 800304a:	b089      	sub	sp, #36	; 0x24
 800304c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800304e:	2300      	movs	r3, #0
 8003050:	61fb      	str	r3, [r7, #28]
 8003052:	2300      	movs	r3, #0
 8003054:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003056:	4b3e      	ldr	r3, [pc, #248]	; (8003150 <HAL_RCC_GetSysClockFreq+0x108>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 030c 	and.w	r3, r3, #12
 800305e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003060:	4b3b      	ldr	r3, [pc, #236]	; (8003150 <HAL_RCC_GetSysClockFreq+0x108>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f003 0303 	and.w	r3, r3, #3
 8003068:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <HAL_RCC_GetSysClockFreq+0x34>
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	2b0c      	cmp	r3, #12
 8003074:	d121      	bne.n	80030ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d11e      	bne.n	80030ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800307c:	4b34      	ldr	r3, [pc, #208]	; (8003150 <HAL_RCC_GetSysClockFreq+0x108>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b00      	cmp	r3, #0
 8003086:	d107      	bne.n	8003098 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003088:	4b31      	ldr	r3, [pc, #196]	; (8003150 <HAL_RCC_GetSysClockFreq+0x108>)
 800308a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800308e:	0a1b      	lsrs	r3, r3, #8
 8003090:	f003 030f 	and.w	r3, r3, #15
 8003094:	61fb      	str	r3, [r7, #28]
 8003096:	e005      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003098:	4b2d      	ldr	r3, [pc, #180]	; (8003150 <HAL_RCC_GetSysClockFreq+0x108>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	091b      	lsrs	r3, r3, #4
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030a4:	4a2b      	ldr	r2, [pc, #172]	; (8003154 <HAL_RCC_GetSysClockFreq+0x10c>)
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10d      	bne.n	80030d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030b8:	e00a      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	2b04      	cmp	r3, #4
 80030be:	d102      	bne.n	80030c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030c0:	4b25      	ldr	r3, [pc, #148]	; (8003158 <HAL_RCC_GetSysClockFreq+0x110>)
 80030c2:	61bb      	str	r3, [r7, #24]
 80030c4:	e004      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	d101      	bne.n	80030d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030cc:	4b23      	ldr	r3, [pc, #140]	; (800315c <HAL_RCC_GetSysClockFreq+0x114>)
 80030ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	2b0c      	cmp	r3, #12
 80030d4:	d134      	bne.n	8003140 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030d6:	4b1e      	ldr	r3, [pc, #120]	; (8003150 <HAL_RCC_GetSysClockFreq+0x108>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d003      	beq.n	80030ee <HAL_RCC_GetSysClockFreq+0xa6>
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	d003      	beq.n	80030f4 <HAL_RCC_GetSysClockFreq+0xac>
 80030ec:	e005      	b.n	80030fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80030ee:	4b1a      	ldr	r3, [pc, #104]	; (8003158 <HAL_RCC_GetSysClockFreq+0x110>)
 80030f0:	617b      	str	r3, [r7, #20]
      break;
 80030f2:	e005      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80030f4:	4b19      	ldr	r3, [pc, #100]	; (800315c <HAL_RCC_GetSysClockFreq+0x114>)
 80030f6:	617b      	str	r3, [r7, #20]
      break;
 80030f8:	e002      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	617b      	str	r3, [r7, #20]
      break;
 80030fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003100:	4b13      	ldr	r3, [pc, #76]	; (8003150 <HAL_RCC_GetSysClockFreq+0x108>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	091b      	lsrs	r3, r3, #4
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	3301      	adds	r3, #1
 800310c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800310e:	4b10      	ldr	r3, [pc, #64]	; (8003150 <HAL_RCC_GetSysClockFreq+0x108>)
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	0a1b      	lsrs	r3, r3, #8
 8003114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	fb03 f202 	mul.w	r2, r3, r2
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	fbb2 f3f3 	udiv	r3, r2, r3
 8003124:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003126:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <HAL_RCC_GetSysClockFreq+0x108>)
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	0e5b      	lsrs	r3, r3, #25
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	3301      	adds	r3, #1
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	fbb2 f3f3 	udiv	r3, r2, r3
 800313e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003140:	69bb      	ldr	r3, [r7, #24]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3724      	adds	r7, #36	; 0x24
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40021000 	.word	0x40021000
 8003154:	080040fc 	.word	0x080040fc
 8003158:	00f42400 	.word	0x00f42400
 800315c:	007a1200 	.word	0x007a1200

08003160 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003168:	2300      	movs	r3, #0
 800316a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800316c:	4b2a      	ldr	r3, [pc, #168]	; (8003218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800316e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003178:	f7ff fa26 	bl	80025c8 <HAL_PWREx_GetVoltageRange>
 800317c:	6178      	str	r0, [r7, #20]
 800317e:	e014      	b.n	80031aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003180:	4b25      	ldr	r3, [pc, #148]	; (8003218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003184:	4a24      	ldr	r2, [pc, #144]	; (8003218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800318a:	6593      	str	r3, [r2, #88]	; 0x58
 800318c:	4b22      	ldr	r3, [pc, #136]	; (8003218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800318e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003198:	f7ff fa16 	bl	80025c8 <HAL_PWREx_GetVoltageRange>
 800319c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800319e:	4b1e      	ldr	r3, [pc, #120]	; (8003218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a2:	4a1d      	ldr	r2, [pc, #116]	; (8003218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031b0:	d10b      	bne.n	80031ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b80      	cmp	r3, #128	; 0x80
 80031b6:	d919      	bls.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2ba0      	cmp	r3, #160	; 0xa0
 80031bc:	d902      	bls.n	80031c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031be:	2302      	movs	r3, #2
 80031c0:	613b      	str	r3, [r7, #16]
 80031c2:	e013      	b.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031c4:	2301      	movs	r3, #1
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	e010      	b.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b80      	cmp	r3, #128	; 0x80
 80031ce:	d902      	bls.n	80031d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031d0:	2303      	movs	r3, #3
 80031d2:	613b      	str	r3, [r7, #16]
 80031d4:	e00a      	b.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b80      	cmp	r3, #128	; 0x80
 80031da:	d102      	bne.n	80031e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031dc:	2302      	movs	r3, #2
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	e004      	b.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b70      	cmp	r3, #112	; 0x70
 80031e6:	d101      	bne.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031e8:	2301      	movs	r3, #1
 80031ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f023 0207 	bic.w	r2, r3, #7
 80031f4:	4909      	ldr	r1, [pc, #36]	; (800321c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031fc:	4b07      	ldr	r3, [pc, #28]	; (800321c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	429a      	cmp	r2, r3
 8003208:	d001      	beq.n	800320e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40021000 	.word	0x40021000
 800321c:	40022000 	.word	0x40022000

08003220 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e095      	b.n	800335e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	2b00      	cmp	r3, #0
 8003238:	d108      	bne.n	800324c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003242:	d009      	beq.n	8003258 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	61da      	str	r2, [r3, #28]
 800324a:	e005      	b.n	8003258 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d106      	bne.n	8003278 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7fe fd54 	bl	8001d20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800328e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003298:	d902      	bls.n	80032a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800329a:	2300      	movs	r3, #0
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	e002      	b.n	80032a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80032a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80032ae:	d007      	beq.n	80032c0 <HAL_SPI_Init+0xa0>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032b8:	d002      	beq.n	80032c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80032d0:	431a      	orrs	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003302:	ea42 0103 	orr.w	r1, r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	0c1b      	lsrs	r3, r3, #16
 800331c:	f003 0204 	and.w	r2, r3, #4
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	f003 0310 	and.w	r3, r3, #16
 8003328:	431a      	orrs	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800333c:	ea42 0103 	orr.w	r1, r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b088      	sub	sp, #32
 800336a:	af00      	add	r7, sp, #0
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	603b      	str	r3, [r7, #0]
 8003372:	4613      	mov	r3, r2
 8003374:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <HAL_SPI_Transmit+0x22>
 8003384:	2302      	movs	r3, #2
 8003386:	e15f      	b.n	8003648 <HAL_SPI_Transmit+0x2e2>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003390:	f7fe fde6 	bl	8001f60 <HAL_GetTick>
 8003394:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003396:	88fb      	ldrh	r3, [r7, #6]
 8003398:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d002      	beq.n	80033ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80033a6:	2302      	movs	r3, #2
 80033a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033aa:	e148      	b.n	800363e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <HAL_SPI_Transmit+0x52>
 80033b2:	88fb      	ldrh	r3, [r7, #6]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d102      	bne.n	80033be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033bc:	e13f      	b.n	800363e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2203      	movs	r2, #3
 80033c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	88fa      	ldrh	r2, [r7, #6]
 80033d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	88fa      	ldrh	r2, [r7, #6]
 80033dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003408:	d10f      	bne.n	800342a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003418:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003428:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003434:	2b40      	cmp	r3, #64	; 0x40
 8003436:	d007      	beq.n	8003448 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003446:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003450:	d94f      	bls.n	80034f2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <HAL_SPI_Transmit+0xfa>
 800345a:	8afb      	ldrh	r3, [r7, #22]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d142      	bne.n	80034e6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003464:	881a      	ldrh	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003470:	1c9a      	adds	r2, r3, #2
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800347a:	b29b      	uxth	r3, r3
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003484:	e02f      	b.n	80034e6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b02      	cmp	r3, #2
 8003492:	d112      	bne.n	80034ba <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003498:	881a      	ldrh	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a4:	1c9a      	adds	r2, r3, #2
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034b8:	e015      	b.n	80034e6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034ba:	f7fe fd51 	bl	8001f60 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d803      	bhi.n	80034d2 <HAL_SPI_Transmit+0x16c>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d0:	d102      	bne.n	80034d8 <HAL_SPI_Transmit+0x172>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d106      	bne.n	80034e6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80034e4:	e0ab      	b.n	800363e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1ca      	bne.n	8003486 <HAL_SPI_Transmit+0x120>
 80034f0:	e080      	b.n	80035f4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d002      	beq.n	8003500 <HAL_SPI_Transmit+0x19a>
 80034fa:	8afb      	ldrh	r3, [r7, #22]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d174      	bne.n	80035ea <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003504:	b29b      	uxth	r3, r3
 8003506:	2b01      	cmp	r3, #1
 8003508:	d912      	bls.n	8003530 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350e:	881a      	ldrh	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351a:	1c9a      	adds	r2, r3, #2
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003524:	b29b      	uxth	r3, r3
 8003526:	3b02      	subs	r3, #2
 8003528:	b29a      	uxth	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800352e:	e05c      	b.n	80035ea <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	330c      	adds	r3, #12
 800353a:	7812      	ldrb	r2, [r2, #0]
 800353c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800354c:	b29b      	uxth	r3, r3
 800354e:	3b01      	subs	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003556:	e048      	b.n	80035ea <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b02      	cmp	r3, #2
 8003564:	d12b      	bne.n	80035be <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800356a:	b29b      	uxth	r3, r3
 800356c:	2b01      	cmp	r3, #1
 800356e:	d912      	bls.n	8003596 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003574:	881a      	ldrh	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003580:	1c9a      	adds	r2, r3, #2
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b02      	subs	r3, #2
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003594:	e029      	b.n	80035ea <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	330c      	adds	r3, #12
 80035a0:	7812      	ldrb	r2, [r2, #0]
 80035a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035bc:	e015      	b.n	80035ea <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035be:	f7fe fccf 	bl	8001f60 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d803      	bhi.n	80035d6 <HAL_SPI_Transmit+0x270>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d4:	d102      	bne.n	80035dc <HAL_SPI_Transmit+0x276>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d106      	bne.n	80035ea <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80035e8:	e029      	b.n	800363e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1b1      	bne.n	8003558 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	6839      	ldr	r1, [r7, #0]
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 fcf9 	bl	8003ff0 <SPI_EndRxTxTransaction>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10a      	bne.n	8003628 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003612:	2300      	movs	r3, #0
 8003614:	613b      	str	r3, [r7, #16]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	613b      	str	r3, [r7, #16]
 8003626:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	77fb      	strb	r3, [r7, #31]
 8003634:	e003      	b.n	800363e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003646:	7ffb      	ldrb	r3, [r7, #31]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3720      	adds	r7, #32
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af02      	add	r7, sp, #8
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	603b      	str	r3, [r7, #0]
 800365c:	4613      	mov	r3, r2
 800365e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003660:	2300      	movs	r3, #0
 8003662:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b01      	cmp	r3, #1
 800366e:	d002      	beq.n	8003676 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003670:	2302      	movs	r3, #2
 8003672:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003674:	e11a      	b.n	80038ac <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800367e:	d112      	bne.n	80036a6 <HAL_SPI_Receive+0x56>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10e      	bne.n	80036a6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2204      	movs	r2, #4
 800368c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003690:	88fa      	ldrh	r2, [r7, #6]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	4613      	mov	r3, r2
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	68b9      	ldr	r1, [r7, #8]
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f90e 	bl	80038be <HAL_SPI_TransmitReceive>
 80036a2:	4603      	mov	r3, r0
 80036a4:	e107      	b.n	80038b6 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <HAL_SPI_Receive+0x64>
 80036b0:	2302      	movs	r3, #2
 80036b2:	e100      	b.n	80038b6 <HAL_SPI_Receive+0x266>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036bc:	f7fe fc50 	bl	8001f60 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d002      	beq.n	80036ce <HAL_SPI_Receive+0x7e>
 80036c8:	88fb      	ldrh	r3, [r7, #6]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d102      	bne.n	80036d4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036d2:	e0eb      	b.n	80038ac <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2204      	movs	r2, #4
 80036d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	88fa      	ldrh	r2, [r7, #6]
 80036ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	88fa      	ldrh	r2, [r7, #6]
 80036f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800371e:	d908      	bls.n	8003732 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800372e:	605a      	str	r2, [r3, #4]
 8003730:	e007      	b.n	8003742 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003740:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800374a:	d10f      	bne.n	800376c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800375a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800376a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003776:	2b40      	cmp	r3, #64	; 0x40
 8003778:	d007      	beq.n	800378a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003788:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003792:	d86f      	bhi.n	8003874 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003794:	e034      	b.n	8003800 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d117      	bne.n	80037d4 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f103 020c 	add.w	r2, r3, #12
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b0:	7812      	ldrb	r2, [r2, #0]
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	1c5a      	adds	r2, r3, #1
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80037d2:	e015      	b.n	8003800 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037d4:	f7fe fbc4 	bl	8001f60 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d803      	bhi.n	80037ec <HAL_SPI_Receive+0x19c>
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ea:	d102      	bne.n	80037f2 <HAL_SPI_Receive+0x1a2>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80037fe:	e055      	b.n	80038ac <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003806:	b29b      	uxth	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1c4      	bne.n	8003796 <HAL_SPI_Receive+0x146>
 800380c:	e038      	b.n	8003880 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b01      	cmp	r3, #1
 800381a:	d115      	bne.n	8003848 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	b292      	uxth	r2, r2
 8003828:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	1c9a      	adds	r2, r3, #2
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800383a:	b29b      	uxth	r3, r3
 800383c:	3b01      	subs	r3, #1
 800383e:	b29a      	uxth	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003846:	e015      	b.n	8003874 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003848:	f7fe fb8a 	bl	8001f60 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d803      	bhi.n	8003860 <HAL_SPI_Receive+0x210>
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385e:	d102      	bne.n	8003866 <HAL_SPI_Receive+0x216>
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003872:	e01b      	b.n	80038ac <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800387a:	b29b      	uxth	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1c6      	bne.n	800380e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	6839      	ldr	r1, [r7, #0]
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 fb5b 	bl	8003f40 <SPI_EndRxTransaction>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2220      	movs	r2, #32
 8003894:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	75fb      	strb	r3, [r7, #23]
 80038a2:	e003      	b.n	80038ac <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80038b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3718      	adds	r7, #24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b08a      	sub	sp, #40	; 0x28
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	60f8      	str	r0, [r7, #12]
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	607a      	str	r2, [r7, #4]
 80038ca:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80038cc:	2301      	movs	r3, #1
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_SPI_TransmitReceive+0x26>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e20a      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x43c>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038ec:	f7fe fb38 	bl	8001f60 <HAL_GetTick>
 80038f0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038f8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003900:	887b      	ldrh	r3, [r7, #2]
 8003902:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003904:	887b      	ldrh	r3, [r7, #2]
 8003906:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003908:	7efb      	ldrb	r3, [r7, #27]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d00e      	beq.n	800392c <HAL_SPI_TransmitReceive+0x6e>
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003914:	d106      	bne.n	8003924 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d102      	bne.n	8003924 <HAL_SPI_TransmitReceive+0x66>
 800391e:	7efb      	ldrb	r3, [r7, #27]
 8003920:	2b04      	cmp	r3, #4
 8003922:	d003      	beq.n	800392c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003924:	2302      	movs	r3, #2
 8003926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800392a:	e1e0      	b.n	8003cee <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d005      	beq.n	800393e <HAL_SPI_TransmitReceive+0x80>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d002      	beq.n	800393e <HAL_SPI_TransmitReceive+0x80>
 8003938:	887b      	ldrh	r3, [r7, #2]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d103      	bne.n	8003946 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003944:	e1d3      	b.n	8003cee <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b04      	cmp	r3, #4
 8003950:	d003      	beq.n	800395a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2205      	movs	r2, #5
 8003956:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	887a      	ldrh	r2, [r7, #2]
 800396a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	887a      	ldrh	r2, [r7, #2]
 8003972:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	887a      	ldrh	r2, [r7, #2]
 8003980:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	887a      	ldrh	r2, [r7, #2]
 8003986:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800399c:	d802      	bhi.n	80039a4 <HAL_SPI_TransmitReceive+0xe6>
 800399e:	8a3b      	ldrh	r3, [r7, #16]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d908      	bls.n	80039b6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039b2:	605a      	str	r2, [r3, #4]
 80039b4:	e007      	b.n	80039c6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039c4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d0:	2b40      	cmp	r3, #64	; 0x40
 80039d2:	d007      	beq.n	80039e4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039ec:	f240 8081 	bls.w	8003af2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <HAL_SPI_TransmitReceive+0x140>
 80039f8:	8a7b      	ldrh	r3, [r7, #18]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d16d      	bne.n	8003ada <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a02:	881a      	ldrh	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	1c9a      	adds	r2, r3, #2
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a22:	e05a      	b.n	8003ada <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d11b      	bne.n	8003a6a <HAL_SPI_TransmitReceive+0x1ac>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d016      	beq.n	8003a6a <HAL_SPI_TransmitReceive+0x1ac>
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d113      	bne.n	8003a6a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a46:	881a      	ldrh	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a52:	1c9a      	adds	r2, r3, #2
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d11c      	bne.n	8003ab2 <HAL_SPI_TransmitReceive+0x1f4>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d016      	beq.n	8003ab2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	b292      	uxth	r2, r2
 8003a90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	1c9a      	adds	r2, r3, #2
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ab2:	f7fe fa55 	bl	8001f60 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d80b      	bhi.n	8003ada <HAL_SPI_TransmitReceive+0x21c>
 8003ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac8:	d007      	beq.n	8003ada <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003ad8:	e109      	b.n	8003cee <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d19f      	bne.n	8003a24 <HAL_SPI_TransmitReceive+0x166>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d199      	bne.n	8003a24 <HAL_SPI_TransmitReceive+0x166>
 8003af0:	e0e3      	b.n	8003cba <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_SPI_TransmitReceive+0x244>
 8003afa:	8a7b      	ldrh	r3, [r7, #18]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	f040 80cf 	bne.w	8003ca0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d912      	bls.n	8003b32 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b10:	881a      	ldrh	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1c:	1c9a      	adds	r2, r3, #2
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	3b02      	subs	r3, #2
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b30:	e0b6      	b.n	8003ca0 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	330c      	adds	r3, #12
 8003b3c:	7812      	ldrb	r2, [r2, #0]
 8003b3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b44:	1c5a      	adds	r2, r3, #1
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b58:	e0a2      	b.n	8003ca0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d134      	bne.n	8003bd2 <HAL_SPI_TransmitReceive+0x314>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d02f      	beq.n	8003bd2 <HAL_SPI_TransmitReceive+0x314>
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d12c      	bne.n	8003bd2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d912      	bls.n	8003ba8 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b86:	881a      	ldrh	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b92:	1c9a      	adds	r2, r3, #2
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	3b02      	subs	r3, #2
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ba6:	e012      	b.n	8003bce <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	330c      	adds	r3, #12
 8003bb2:	7812      	ldrb	r2, [r2, #0]
 8003bb4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d148      	bne.n	8003c72 <HAL_SPI_TransmitReceive+0x3b4>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d042      	beq.n	8003c72 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d923      	bls.n	8003c40 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	b292      	uxth	r2, r2
 8003c04:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	1c9a      	adds	r2, r3, #2
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3b02      	subs	r3, #2
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d81f      	bhi.n	8003c6e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c3c:	605a      	str	r2, [r3, #4]
 8003c3e:	e016      	b.n	8003c6e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f103 020c 	add.w	r2, r3, #12
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	7812      	ldrb	r2, [r2, #0]
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c72:	f7fe f975 	bl	8001f60 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d803      	bhi.n	8003c8a <HAL_SPI_TransmitReceive+0x3cc>
 8003c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c88:	d102      	bne.n	8003c90 <HAL_SPI_TransmitReceive+0x3d2>
 8003c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d107      	bne.n	8003ca0 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003c9e:	e026      	b.n	8003cee <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f47f af57 	bne.w	8003b5a <HAL_SPI_TransmitReceive+0x29c>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f47f af50 	bne.w	8003b5a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cba:	69fa      	ldr	r2, [r7, #28]
 8003cbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 f996 	bl	8003ff0 <SPI_EndRxTxTransaction>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ce4:	e003      	b.n	8003cee <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003cf6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3728      	adds	r7, #40	; 0x28
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
	...

08003d04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	4613      	mov	r3, r2
 8003d12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d14:	f7fe f924 	bl	8001f60 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1c:	1a9b      	subs	r3, r3, r2
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	4413      	add	r3, r2
 8003d22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d24:	f7fe f91c 	bl	8001f60 <HAL_GetTick>
 8003d28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d2a:	4b39      	ldr	r3, [pc, #228]	; (8003e10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	015b      	lsls	r3, r3, #5
 8003d30:	0d1b      	lsrs	r3, r3, #20
 8003d32:	69fa      	ldr	r2, [r7, #28]
 8003d34:	fb02 f303 	mul.w	r3, r2, r3
 8003d38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d3a:	e054      	b.n	8003de6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d42:	d050      	beq.n	8003de6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d44:	f7fe f90c 	bl	8001f60 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	69fa      	ldr	r2, [r7, #28]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d902      	bls.n	8003d5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d13d      	bne.n	8003dd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d72:	d111      	bne.n	8003d98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d7c:	d004      	beq.n	8003d88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d86:	d107      	bne.n	8003d98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da0:	d10f      	bne.n	8003dc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e017      	b.n	8003e06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	4013      	ands	r3, r2
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	bf0c      	ite	eq
 8003df6:	2301      	moveq	r3, #1
 8003df8:	2300      	movne	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d19b      	bne.n	8003d3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3720      	adds	r7, #32
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	2000017c 	.word	0x2000017c

08003e14 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08a      	sub	sp, #40	; 0x28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
 8003e20:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003e22:	2300      	movs	r3, #0
 8003e24:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003e26:	f7fe f89b 	bl	8001f60 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2e:	1a9b      	subs	r3, r3, r2
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	4413      	add	r3, r2
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003e36:	f7fe f893 	bl	8001f60 <HAL_GetTick>
 8003e3a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	330c      	adds	r3, #12
 8003e42:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003e44:	4b3d      	ldr	r3, [pc, #244]	; (8003f3c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	00da      	lsls	r2, r3, #3
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	0d1b      	lsrs	r3, r3, #20
 8003e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e56:	fb02 f303 	mul.w	r3, r2, r3
 8003e5a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003e5c:	e060      	b.n	8003f20 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e64:	d107      	bne.n	8003e76 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d104      	bne.n	8003e76 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003e74:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7c:	d050      	beq.n	8003f20 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e7e:	f7fe f86f 	bl	8001f60 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d902      	bls.n	8003e94 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d13d      	bne.n	8003f10 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ea2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eac:	d111      	bne.n	8003ed2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eb6:	d004      	beq.n	8003ec2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec0:	d107      	bne.n	8003ed2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ed0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eda:	d10f      	bne.n	8003efc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003efa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e010      	b.n	8003f32 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003f16:	2300      	movs	r3, #0
 8003f18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d196      	bne.n	8003e5e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3728      	adds	r7, #40	; 0x28
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	2000017c 	.word	0x2000017c

08003f40 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af02      	add	r7, sp, #8
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f54:	d111      	bne.n	8003f7a <SPI_EndRxTransaction+0x3a>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f5e:	d004      	beq.n	8003f6a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f68:	d107      	bne.n	8003f7a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f78:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2200      	movs	r2, #0
 8003f82:	2180      	movs	r1, #128	; 0x80
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f7ff febd 	bl	8003d04 <SPI_WaitFlagStateUntilTimeout>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d007      	beq.n	8003fa0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f94:	f043 0220 	orr.w	r2, r3, #32
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e023      	b.n	8003fe8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fa8:	d11d      	bne.n	8003fe6 <SPI_EndRxTransaction+0xa6>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fb2:	d004      	beq.n	8003fbe <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fbc:	d113      	bne.n	8003fe6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f7ff ff22 	bl	8003e14 <SPI_WaitFifoStateUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d007      	beq.n	8003fe6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fda:	f043 0220 	orr.w	r2, r3, #32
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e000      	b.n	8003fe8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af02      	add	r7, sp, #8
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2200      	movs	r2, #0
 8004004:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f7ff ff03 	bl	8003e14 <SPI_WaitFifoStateUntilTimeout>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d007      	beq.n	8004024 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004018:	f043 0220 	orr.w	r2, r3, #32
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e027      	b.n	8004074 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	2200      	movs	r2, #0
 800402c:	2180      	movs	r1, #128	; 0x80
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f7ff fe68 	bl	8003d04 <SPI_WaitFlagStateUntilTimeout>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d007      	beq.n	800404a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800403e:	f043 0220 	orr.w	r2, r3, #32
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e014      	b.n	8004074 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2200      	movs	r2, #0
 8004052:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f7ff fedc 	bl	8003e14 <SPI_WaitFifoStateUntilTimeout>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d007      	beq.n	8004072 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004066:	f043 0220 	orr.w	r2, r3, #32
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e000      	b.n	8004074 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <memset>:
 800407c:	4402      	add	r2, r0
 800407e:	4603      	mov	r3, r0
 8004080:	4293      	cmp	r3, r2
 8004082:	d100      	bne.n	8004086 <memset+0xa>
 8004084:	4770      	bx	lr
 8004086:	f803 1b01 	strb.w	r1, [r3], #1
 800408a:	e7f9      	b.n	8004080 <memset+0x4>

0800408c <__libc_init_array>:
 800408c:	b570      	push	{r4, r5, r6, lr}
 800408e:	4d0d      	ldr	r5, [pc, #52]	; (80040c4 <__libc_init_array+0x38>)
 8004090:	4c0d      	ldr	r4, [pc, #52]	; (80040c8 <__libc_init_array+0x3c>)
 8004092:	1b64      	subs	r4, r4, r5
 8004094:	10a4      	asrs	r4, r4, #2
 8004096:	2600      	movs	r6, #0
 8004098:	42a6      	cmp	r6, r4
 800409a:	d109      	bne.n	80040b0 <__libc_init_array+0x24>
 800409c:	4d0b      	ldr	r5, [pc, #44]	; (80040cc <__libc_init_array+0x40>)
 800409e:	4c0c      	ldr	r4, [pc, #48]	; (80040d0 <__libc_init_array+0x44>)
 80040a0:	f000 f818 	bl	80040d4 <_init>
 80040a4:	1b64      	subs	r4, r4, r5
 80040a6:	10a4      	asrs	r4, r4, #2
 80040a8:	2600      	movs	r6, #0
 80040aa:	42a6      	cmp	r6, r4
 80040ac:	d105      	bne.n	80040ba <__libc_init_array+0x2e>
 80040ae:	bd70      	pop	{r4, r5, r6, pc}
 80040b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040b4:	4798      	blx	r3
 80040b6:	3601      	adds	r6, #1
 80040b8:	e7ee      	b.n	8004098 <__libc_init_array+0xc>
 80040ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80040be:	4798      	blx	r3
 80040c0:	3601      	adds	r6, #1
 80040c2:	e7f2      	b.n	80040aa <__libc_init_array+0x1e>
 80040c4:	0800412c 	.word	0x0800412c
 80040c8:	0800412c 	.word	0x0800412c
 80040cc:	0800412c 	.word	0x0800412c
 80040d0:	08004130 	.word	0x08004130

080040d4 <_init>:
 80040d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040d6:	bf00      	nop
 80040d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040da:	bc08      	pop	{r3}
 80040dc:	469e      	mov	lr, r3
 80040de:	4770      	bx	lr

080040e0 <_fini>:
 80040e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040e2:	bf00      	nop
 80040e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040e6:	bc08      	pop	{r3}
 80040e8:	469e      	mov	lr, r3
 80040ea:	4770      	bx	lr
